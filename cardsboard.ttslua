
--Board cards
TOPTHREE_STRING = "The president examines\nthe top three cards."
PICKPRES_STRING = "The president picks\nthe next presidential\ncandidate."
INSPECT_STRING = "The president\ninvestigates a\nplayer\'s identity\ncard."
BULLET_STRING = "The president must\nkill a player."
TOPCARD_STRING = "The president examines\nthe top card."
IMPRISON_STRING = "The president must\nimprison a player."
PRESTAKESABOVE_STRING = "The president takes\nthe card above."
PRESTAKESBELOW_STRING = "The president takes\nthe card below."
PRESTAKESHIDDENABOVE_STRING = "The president takes\nthe hidden card above."
PRESTAKESHIDDENBELOW_STRING = "The president takes\nthe hidden card below."
PRESGIVESABOVE_STRING = "The president gives\nthe card above\nto another player."
PRESGIVESBELOW_STRING = "The president gives\nthe card below\nto another player."
PRESGIVESHIDDENABOVE_STRING = "The president gives\nthe card above\nto another player\nafter examining it."
PRESGIVESHIDDENBELOW_STRING = "The president gives\nthe card below\nto another player\nafter examining it."
VETO_STRING = "Veto power is\nunlocked."
CHANCELLOR_STRING = "The chancellor gets the power."
--Policy cards
LIBERALPOLICY_STRING = "Liberal Policy"
FASCISTPOLICY_STRING = "Fascist Policy"
GREYPOLICY_STRING = "Grey Policy"
NOTUSED_STRING = "Not Used"

function isBoardCard(objIn)
	if objIn.tag == "Card" and
	   (objIn.getDescription() == TOPTHREE_STRING or
		 objIn.getDescription() == PICKPRES_STRING or
	    objIn.getDescription() == INSPECT_STRING or
	    objIn.getDescription() == BULLET_STRING or
		 objIn.getDescription() == TOPCARD_STRING or
		 objIn.getDescription() == IMPRISON_STRING or
		 objIn.getDescription() == PRESTAKESABOVE_STRING or
		 objIn.getDescription() == PRESTAKESBELOW_STRING or
		 objIn.getDescription() == PRESTAKESHIDDENABOVE_STRING or
		 objIn.getDescription() == PRESTAKESHIDDENBELOW_STRING or
		 objIn.getDescription() == PRESGIVESABOVE_STRING or
		 objIn.getDescription() == PRESGIVESBELOW_STRING or
		 objIn.getDescription() == PRESGIVESHIDDENABOVE_STRING or
		 objIn.getDescription() == PRESGIVESHIDDENBELOW_STRING or
		 objIn.getDescription() == VETO_STRING or
		 objIn.getDescription() == CHANCELLOR_STRING) then
		return true
	end
	return false
end

function isSubBoardCard(objIn)
	if objIn.tag == "Card" and
	   (objIn.getDescription() == VETO_STRING or
		 objIn.getDescription() == CHANCELLOR_STRING) then
		return true
	end
	return false
end

function isBoardCardAboveAbility(objIn)
	if objIn.tag == "Card" and
	   (objIn.getDescription() == PRESTAKESABOVE_STRING or
		 objIn.getDescription() == PRESGIVESABOVE_STRING) then
		return true
	end
	return false
end

function isBoardCardAboveHiddenAbility(objIn)
	if objIn.tag == "Card" and
	   (objIn.getDescription() == PRESTAKESHIDDENABOVE_STRING or
		 objIn.getDescription() == PRESGIVESHIDDENABOVE_STRING) then
		return true
	end
	return false
end

function isBoardCardBelowAbility(objIn)
	if objIn.tag == "Card" and
	   (objIn.getDescription() == PRESTAKESBELOW_STRING or
		 objIn.getDescription() == PRESGIVESBELOW_STRING) then
		return true
	end
	return false
end

function isBoardCardBelowHiddenAbility(objIn)
	if objIn.tag == "Card" and
	   (objIn.getDescription() == PRESTAKESHIDDENBELOW_STRING or
		 objIn.getDescription() == PRESGIVESHIDDENBELOW_STRING) then
		return true
	end
	return false
end

function isBoardCardTopThree(objIn)
	if objIn.tag == "Card" and objIn.getDescription() == TOPTHREE_STRING then
		return true
	end
	return false
end

function isBoardCardPickPres(objIn)
	if objIn.tag == "Card" and objIn.getDescription() == PICKPRES_STRING then
		return true
	end
	return false
end

function isBoardCardInspect(objIn)
	if objIn.tag == "Card" and objIn.getDescription() == INSPECT_STRING then
		return true
	end
	return false
end

function isBoardCardBullet(objIn)
	if objIn.tag == "Card" and objIn.getDescription() == BULLET_STRING then
		return true
	end
	return false
end

function isBoardCardTopCard(objIn)
	if objIn.tag == "Card" and objIn.getDescription() == TOPCARD_STRING then
		return true
	end
	return false
end

function isBoardCardImprison(objIn)
	if objIn.tag == "Card" and objIn.getDescription() == IMPRISON_STRING then
		return true
	end
	return false
end

function isPolicyCard(objIn)
	if objIn.tag == "Card" and (objIn.getDescription() == FASCISTPOLICY_STRING
		or objIn.getDescription() == LIBERALPOLICY_STRING
		or objIn.getDescription() == GREYPOLICY_STRING)
		and not objIn.held_by_color then
		return true
	end
	return false
end

function isFascistPolicyCard(objIn)
	if objIn.tag == "Card" and objIn.getDescription() == FASCISTPOLICY_STRING
		and not objIn.held_by_color then
		return true
	end
	return false
end

function isLiberalPolicyCard(objIn)
	if objIn.tag == "Card" and objIn.getDescription() == LIBERALPOLICY_STRING
		and not objIn.held_by_color then
		return true
	end
	return false
end

function isGreyPolicyCard(objIn)
	if objIn.tag == "Card" and objIn.getDescription() == GREYPOLICY_STRING
		and not objIn.held_by_color then
		return true
	end
	return false
end

function isPolicyNotUsedCard(objIn)
	if objIn.tag == "Card" and objIn.getDescription() == NOTUSED_STRING
		and not objIn.held_by_color then
		return true
	end
	return false
end

function refreshBoardCards()
	if options.gameType == 2 then
		deleteCustomBoardCards()
		spawnCustomBoardCards()
		-- Unlock board cards
		testActionUsedPolicyZones(
			function(p) return isBoardCard(p) or isPolicyNotUsedCard(p) end,
			function(p) p.setLock(false) end,
			boardCardWaitId)
	else
		--delete board cards
		deleteCustomBoardCards()
		testActionUsedPolicyZones(
			function(p) return isBoardCard(p) or isPolicyNotUsedCard(p) end,
			function(p) p.destruct() end,
			nil)
		if options.gameType == 0 then
			spawnNotUsedFascist(getPositionByGUIDOffsetZ(fascist_zone_guids[1], 0.1))
			spawnNotUsedLiberal(getPositionByGUIDOffsetZ(liberal_zone_guids[1], 0.1))
		end
		if #getSeatedPlayers() > 8 then
			if options.gameType == 1 then
				spawnTopCardOrange(getPositionByGUIDOffsetZ(fascist_zone_guids[1], 0.1))
			end
			spawnInspectOrange(getPositionByGUIDOffsetZ(fascist_zone_guids[2], 0.1))
			spawnInspectOrange(getPositionByGUIDOffsetZ(fascist_zone_guids[3], 0.1))
			spawnPickPresOrange(getPositionByGUIDOffsetZ(fascist_zone_guids[4], 0.1))
		elseif #getSeatedPlayers() > 6 then
			if options.gameType == 1 then
				spawnTopCardOrange(getPositionByGUIDOffsetZ(fascist_zone_guids[2], 0.1))
			end
			spawnInspectOrange(getPositionByGUIDOffsetZ(fascist_zone_guids[3], 0.1))
			spawnPickPresOrange(getPositionByGUIDOffsetZ(fascist_zone_guids[4], 0.1))
		else
			if options.gameType == 1 then
				spawnTopCardOrange(getPositionByGUIDOffsetZ(fascist_zone_guids[3], 0.1))
			end
			spawnTopThreeOrange(getPositionByGUIDOffsetZ(fascist_zone_guids[4], 0.1))
		end
		spawnBulletRed(getPositionByGUIDOffsetZ(fascist_zone_guids[5], 0.1))
		spawnBulletRed(getPositionByGUIDOffsetZ(fascist_zone_guids[6], 0.1))
		spawnVetoRed(getPositionByGUIDOffsetZ(fascist_zone_guids[6], -2))
		if boardCardWaitId then
			Wait.stop(boardCardWaitId)
		end
		boardCardWaitId = Wait.time(
			function()
				testReadyToLock(
					function(p)
						return isBoardCard(p) or isPolicyNotUsedCard(p)
					end, boardCardWaitId)
			end, 5, -1)
	end
	lastPlayerCt = #getSeatedPlayers()
end

function testActionUsedPolicyZones(testFunc, actionFunc, waitID)
	local tmpZoneGuid
	if waitID then
		Wait.stop(waitID)
	end
	for _, tmpZoneGuid in ipairs(liberal_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if testFunc(j) then
					actionFunc(j)
				end
			end
		end
	end
	for _, tmpZoneGuid in ipairs(fascist_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if testFunc(j) then
					actionFunc(j)
				end
			end
		end
	end
end

function testReadyToLock(testFunc, waitID)
	local lock = true
	--check if anything is loading
	for _, j in pairs(getAllObjects()) do
		if j.loading_custom and j.tag ~= "3D Text" then lock = false end
	end
	--check if resting
	if lock then
		for _, tmpZoneGuid in ipairs(liberal_zone_guids) do
			tmpZone = getObjectFromGUID(tmpZoneGuid)
			if tmpZone then
				inZone = tmpZone.getObjects()
				for _, j in ipairs(inZone) do
					if testFunc(j) then
						if not j.resting then lock = false end
					end
				end
			end
		end
	end
	if lock then
		for _, tmpZoneGuid in ipairs(fascist_zone_guids) do
			tmpZone = getObjectFromGUID(tmpZoneGuid)
			if tmpZone then
				inZone = tmpZone.getObjects()
				for _, j in ipairs(inZone) do
					if testFunc(j) then
						if not j.resting then lock = false end
					end
				end
			end
		end
	end
	if lock then
		-- lock board cards
		testActionUsedPolicyZones(
			function(p) return testFunc(p) end,
			function(p) p.setLock(true) end,
			waitID)
	end
end

function deleteCustomBoardCards()
	local tmpZoneGuid
	local inUse = {}
	for _, tmpZoneGuid in ipairs(liberal_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if isBoardCard(j) or isPolicyNotUsedCard(j) then
					smartTableInsert(inUse, j.getGUID())
				end
			end
		end
	end
	for _, tmpZoneGuid in ipairs(fascist_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if isBoardCard(j) or isPolicyNotUsedCard(j) then
					smartTableInsert(inUse, j.getGUID())
				end
			end
		end
	end
	for _, j in pairs(getAllObjects()) do
		if (isBoardCard(j) or isPolicyNotUsedCard(j)) and not inTable(inUse, j.getGUID()) then
			destroyObject(j);
		end
	end
end

function spawnCustomBoardCards()
	spawnTopThreeBlue({-36, 2, 22})
	spawnTopThreeOrange({-32, 2, 22})
	spawnTopThreeRed({-28, 2, 22})
	spawnInspectBlue({-36, 2, 18})
	spawnInspectOrange({-32, 2, 18})
	spawnInspectRed({-28, 2, 18})
	spawnPickPresBlue({-36, 2, 14})
	spawnPickPresOrange({-32, 2, 14})
	spawnPickPresRed({-28, 2, 14})
	spawnBulletBlue({-36, 2, 10})
	spawnBulletOrange({-32, 2, 10})
	spawnBulletRed({-28, 2, 10})
	spawnTopCardBlue({-36, 2, 6})
	spawnTopCardOrange({-32, 2, 6})
	spawnTopCardRed({-28, 2, 6})
	--spawnImprisonBlue({-36, 2, 2})
	--spawnImprisonOrange({-32, 2, 2})
	--spawnImprisonRed({-28, 2, 2})
	spawnPresTakesBlue({-36, 2, -2})
	spawnPresTakesOrange({-32, 2, -2})
	spawnPresTakesRed({-28, 2, -2})
	spawnPresTakesHiddenBlue({-36, 2, -6})
	spawnPresTakesHiddenOrange({-32, 2, -6})
	spawnPresTakesHiddenRed({-28, 2, -6})
	spawnPresGivesBlue({-36, 2, -10})
	spawnPresGivesOrange({-32, 2, -10})
	spawnPresGivesRed({-28, 2, -10})
	spawnPresGivesHiddenBlue({-36, 2, -14})
	spawnPresGivesHiddenOrange({-32, 2, -14})
	spawnPresGivesHiddenRed({-28, 2, -14})
	spawnVetoBlue({-36, 2, -16.8})
	spawnVetoOrange({-32, 2, -16.8})
	spawnVetoRed({-28, 2, -16.8})
	--spawnChancellorBlue({-36, 2, -18.6})
	--spawnChancellorOrange({-32, 2, -18.6})
	--spawnChancellorRed({-28, 2, -18.6})
	spawnNotUsedLiberal({-34, 2, -22.4})
	spawnNotUsedFascist({-30, 2, -22.4})
end

function spawnTopThreeOrange(pos)
	return spawnBoardCard("10000", TOPTHREE_STRING, pos)
end

function spawnTopThreeRed(pos)
	return spawnBoardCard("10001", TOPTHREE_STRING, pos)
end

function spawnTopThreeBlue(pos)
	return spawnBoardCard("10002", TOPTHREE_STRING, pos)
end

function spawnPickPresOrange(pos)
	return spawnBoardCard("10003", PICKPRES_STRING, pos)
end

function spawnPickPresRed(pos)
	return spawnBoardCard("10004", PICKPRES_STRING, pos)
end

function spawnPickPresBlue(pos)
	return spawnBoardCard("10005", PICKPRES_STRING, pos)
end

function spawnInspectOrange(pos)
	return spawnBoardCard("10006", INSPECT_STRING, pos)
end

function spawnInspectRed(pos)
	return spawnBoardCard("10007", INSPECT_STRING, pos)
end

function spawnInspectBlue(pos)
	return spawnBoardCard("10008", INSPECT_STRING, pos)
end

function spawnBulletOrange(pos)
	return spawnBoardCard("10009", BULLET_STRING, pos)
end

function spawnBulletRed(pos)
	return spawnBoardCard("10010", BULLET_STRING, pos)
end

function spawnBulletBlue(pos)
	return spawnBoardCard("10011", BULLET_STRING, pos)
end

function spawnTopCardOrange(pos)
	return spawnBoardCard("10012", TOPCARD_STRING, pos)
end

function spawnTopCardRed(pos)
	return spawnBoardCard("10013", TOPCARD_STRING, pos)
end

function spawnTopCardBlue(pos)
	return spawnBoardCard("10014", TOPCARD_STRING, pos)
end

function spawnImprisonOrange(pos)
	return spawnBoardCard("10015", IMPRISON_STRING, pos)
end

function spawnImprisonRed(pos)
	return spawnBoardCard("10016", IMPRISON_STRING, pos)
end

function spawnImprisonBlue(pos)
	return spawnBoardCard("10017", IMPRISON_STRING, pos)
end

function spawnPresTakesOrange(pos)
	return spawnBoardCard("10018", PRESTAKESABOVE_STRING, pos)
end

function spawnPresTakesRed(pos)
	return spawnBoardCard("10019", PRESTAKESABOVE_STRING, pos)
end

function spawnPresTakesBlue(pos)
	return spawnBoardCard("10020", PRESTAKESBELOW_STRING, pos)
end

function spawnPresTakesHiddenOrange(pos)
	return spawnBoardCard("10021", PRESTAKESHIDDENABOVE_STRING, pos)
end

function spawnPresTakesHiddenRed(pos)
	return spawnBoardCard("10022", PRESTAKESHIDDENABOVE_STRING, pos)
end

function spawnPresTakesHiddenBlue(pos)
	return spawnBoardCard("10023", PRESTAKESHIDDENBELOW_STRING , pos)
end

function spawnPresGivesOrange(pos)
	return spawnBoardCard("10024", PRESGIVESABOVE_STRING, pos)
end

function spawnPresGivesRed(pos)
	return spawnBoardCard("10025", PRESGIVESABOVE_STRING, pos)
end

function spawnPresGivesBlue(pos)
	return spawnBoardCard("10026", PRESGIVESBELOW_STRING, pos)
end

function spawnPresGivesHiddenOrange(pos)
	return spawnBoardCard("10027", PRESGIVESHIDDENABOVE_STRING, pos)
end

function spawnPresGivesHiddenRed(pos)
	return spawnBoardCard("10028", PRESGIVESHIDDENABOVE_STRING, pos)
end

function spawnPresGivesHiddenBlue(pos)
	return spawnBoardCard("10029", PRESGIVESHIDDENBELOW_STRING, pos)
end

function spawnBoardCard(cardID, desc, pos)
   local params = {
      json =
			"{" ..
			"\"Name\": \"Card\", " ..
			"\"Transform\": {\"posX\": 0,\"posY\": 0,\"posZ\": 0,\"rotX\": 0,\"rotY\": 0,\"rotZ\": 0,\"scaleX\": 1,\"scaleY\": 1,\"scaleZ\": 1}, " ..
			"\"CardID\": " .. cardID .. ", " ..
			"\"CustomDeck\": {" ..
			"\"" .. string.sub(cardID, 1, 3) .. "\": {" ..
			"\"FaceURL\": \"http://cloud-3.steamusercontent.com/ugc/972100947047128025/26EA18B539ACB7B13ABB97655A9E5758F5566C56/\", " ..
			"\"BackURL\": \"http://cloud-3.steamusercontent.com/ugc/493521193151335450/EF640CCED543D0988B40DF3483149AAFA477ECFD/\", " ..
			"\"NumWidth\": 10, " ..
			"\"NumHeight\": 7, " ..
			"\"BackIsHidden\": false, " ..
			"\"UniqueBack\": true " ..
			"}" ..
			"}" ..
			"}",
      position = pos,
      rotation = FACE_UP_ROT,
      scale = {x = 1, y = 1, z = 1},
      sound = false
   }
	local card = spawnObjectJSON(params)
	card.setDescription(desc)
	card.use_grid = false
   return card
end

function spawnVetoOrange(pos)
	return spawnSubBoardCard("10100", VETO_STRING, pos)
end

function spawnVetoRed(pos)
	return spawnSubBoardCard("10101", VETO_STRING, pos)
end

function spawnVetoBlue(pos)
	return spawnSubBoardCard("10102", VETO_STRING, pos)
end

function spawnChancellorOrange(pos)
	return spawnSubBoardCard("10103", CHANCELLOR_STRING, pos)
end

function spawnChancellorRed(pos)
	return spawnSubBoardCard("10104", CHANCELLOR_STRING, pos)
end

function spawnChancellorBlue(pos)
	return spawnSubBoardCard("10105", CHANCELLOR_STRING, pos)
end

function spawnSubBoardCard(cardID, desc, pos)
   local params = {
      json =
			"{" ..
			"\"Name\": \"Card\", " ..
			"\"Transform\": {\"posX\": 0,\"posY\": 0,\"posZ\": 0,\"rotX\": 0,\"rotY\": 0,\"rotZ\": 0,\"scaleX\": 1,\"scaleY\": 1,\"scaleZ\": 1}, " ..
			"\"CardID\": " .. cardID .. ", " ..
			"\"CustomDeck\": {" ..
			"\"" .. string.sub(cardID, 1, 3) .. "\": {" ..
			"\"FaceURL\": \"http://cloud-3.steamusercontent.com/ugc/972100947052102628/F255D2E89C2A1D4FAA9C1AEC714802863A388D8C/\", " ..
			"\"BackURL\": \"http://cloud-3.steamusercontent.com/ugc/972100947052102628/F255D2E89C2A1D4FAA9C1AEC714802863A388D8C/\", " ..
			"\"NumWidth\": 3, " ..
			"\"NumHeight\": 2, " ..
			"\"BackIsHidden\": false, " ..
			"\"UniqueBack\": true " ..
			"}" ..
			"}" ..
			"}",
      position = pos,
      rotation = FACE_UP_ROT,
      scale = {x = 0.3, y = 1, z = 0.3},
      sound = false
   }
	local card = spawnObjectJSON(params)
	card.setDescription(desc)
	card.use_grid = false
   return card
end

function spawnLiberalPolicy(pos, rot)
	return spawnPolicyCard("10200", LIBERALPOLICY_STRING, pos, rot, true)
end

function spawnFascistPolicy(pos, rot)
	return spawnPolicyCard("10201", FASCISTPOLICY_STRING, pos, rot, true)
end

function spawnGreyPolicy(pos, rot)
	return spawnPolicyCard("10203", GREYPOLICY_STRING, pos, rot, true)
end

function spawnNotUsedLiberal(pos)
	return spawnPolicyCard("10204", NOTUSED_STRING, pos, FACE_UP_ROT, false)
end

function spawnNotUsedFascist(pos)
	return spawnPolicyCard("10205", NOTUSED_STRING, pos, FACE_UP_ROT, false)
end

function spawnPolicyCard(cardID, desc, pos, rot, luaBool)
   local params = {
      json =
			"{" ..
			"\"Name\": \"Card\", " ..
			"\"Transform\": {\"posX\": 0,\"posY\": 0,\"posZ\": 0,\"rotX\": 0,\"rotY\": 0,\"rotZ\": 0,\"scaleX\": 1,\"scaleY\": 1,\"scaleZ\": 1}, " ..
			"\"CardID\": " .. cardID .. ", " ..
			"\"CustomDeck\": {" ..
			"\"" .. string.sub(cardID, 1, 3) .. "\": {" ..
			"\"FaceURL\": \"http://cloud-3.steamusercontent.com/ugc/968725783513761884/D20A41E646CE901CA81FC067E81072BBDA9313C4/\", " ..
			"\"BackURL\": \"http://cloud-3.steamusercontent.com/ugc/486767005708571374/C5FBC566556E3FBE9A6C8ACCDB2472FA911A253A/\", " ..
			"\"NumWidth\": 4, " ..
			"\"NumHeight\": 2, " ..
			"\"BackIsHidden\": false, " ..
			"\"UniqueBack\": false " ..
			"}" ..
			"}" ..
			"}",
      position = pos,
      rotation = rot,
      scale = {x = 1.51, y = 1, z = 1.51},
      sound = false
   }
	local card = spawnObjectJSON(params)
	card.setDescription(desc)
	card.use_grid = false
	if luaBool then
		card.setLuaScript(
			'enabled = false -- workaround for rewind error\r\n' ..
			'\r\n' ..
			'function onDrop(playerColor)\r\n' ..
			'	enabled = true\r\n' ..
			'	Global.call(\'createPolicyCardWait\')\r\n' ..
			'end\r\n' ..
			'\r\n' ..
			'function onCollisionEnter(collisionInfo)\r\n' ..
			'	if enabled then\r\n' ..
			'		Global.call(\'createPolicyCardWait\')\r\n' ..
			'	end\r\n' ..
			'end\r\n')
	end
   return card
end
