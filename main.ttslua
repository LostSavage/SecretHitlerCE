--Static

--Boards and Buttons
settingsPannel_guid = '39d283'
fasPannel_guid = 'c09dbd'
drawPileBoard_guid = 'a5b10f'
discardPileBoard_guid = '3e225f'
radio_string = '●'
check_string = '✓'

--Decks/Cards
hitler_deck_guid = '5997ea'
fascist_deck_guids = {'5f2055','fb58cf', '4a3cf4'}
fascist_deck_extra_guid = 'd60f75'
liberal_deck_guids = {'b156f7', 'd1735a', 'c8ab2a', 'b2873d', '313939', '40d8f5'}
liberal_deck_extra_guid = '304115'
extraRole_card_guids = {'675a6f', '16e480', '0a5960', '02b664', '328440', '05df40', '98f4dd', '7b4b46', 'ccb7ed', 'c2309a'}
fakeMembership_card_guid = '55d1c3'
fascistMembership_card_guid = 'e4d489'
liberalMembership_card_guid = 'a73564'
GREY_POLICY_RIGHT = -9
GREY_EXPANSION_RIGHT = 9

--Placards and Tracker
PRESIDENT_GUID = "4d3d8f"
PREV_PRESIDENT_GUID = "780217"
PREV_PRESIDENT_POS = {x = -16.5, y = 1.06, z = -17}
PREV_PRESIDENT_ROT = {x = 0, y = 270, z = 0}
CHANCELOR_GUID = "7dba7e"
PREV_CHANCELOR_GUID = "448483"
PREV_CHANCELOR_POS = {x = 16.5, y = 1.06, z = -17}
PREV_CHANCELOR_ROT = {x = 0, y = 90, z = 0}
ELECTION_TRACKER_GUID = "dd57c4"

--Scripting Zones
DRAW_ZONE_GUID = '6463d3'
DISCARD_ZONE_GUID = 'b9bd6e'
ABILITIESPILE_ZONE_GUID = 'eea120'
EFFECTSPILE_ZONE_GUID = '374a16'
fascist_zone_guids = {'1f0149', '390247', '6c3840', '13e460', '441bbf', '6a906e', '488053'}
liberal_zone_guids = {'12b8ce', '3cabfa', '6f02b7', '939e6d', '3f80ba', 'a6b76f'}
topdeck_zone_guid = 'c0b577'
policySafety_zone_guids = {White = 'e99663', Brown = '13b335', Red = 'd7774a', Orange = 'f601b1', Yellow = '620e09', Green = 'b7c2d8', Teal = '162d55', Blue = '0aa61b', Purple = 'fdc17a', Pink = 'c4d8e8'}

--Other
HIDDEN_ZONE_GUIDS = {White = "f13d0b", Brown = "90049b", Red = "134297", Orange = "344002", Yellow = "9b5558", Green = "7a8301", Teal = "568a75", Blue = "dbd95e", Purple = "cc1b94", Pink = "d954ee"}
trusted_players = {'76561197992512677'}
boardGreen_rgb = {14/255, 45/255, 18/255}
boardBrown_rgb = {53/255, 27/255, 17/255}
lastVote_guids = {'88c953', 'ba4919', 'b7dcde', '4598da'}
-- @{100, 100, 100+} hidden zones
-- @{-100, 100, -100} is used to delete/spawn objects

--Variable
customOnly = nil
bannerZoneGuid = nil
topdeck = false
lastDrawCt = nil
lastPlayerCt = nil
hold = false
votes = {}
disableVote = false
votePassed = false
blockDraw = false

--Wait timers
voteWaitId = nil
policyWaitId = nil
boardCardWaitId = nil

--Saved data
activePowerColor = nil
bannerGuids = {}
bulletInfo = {
	type = 'Custom_Model',
	mesh = 'http://cloud-3.steamusercontent.com/ugc/487893695357489958/2749FC201350D558AC9DF373861E4323C8B354BB/',
	diffuse = '',
	assetbundle = nil,
	assetbundle_secondary = nil,
	convex = true,
	image = nil,
	material = 2,
	specular_color = {1, 1, 0.5882353},
	specular_intensity = 1.7,
	specular_sharpness = 8.0,
	fresnel_strength = 0,
	use_grid = false,
	colorTint = {0, 0, 0.0382530019},
	scale = {0.75, 0.75, 0.75},
	action = 'Shoots',
	status = 'Dead',
	shooterColor = nil
}
fascists = {}
forcePres = nil
greyAvatarGuids = {}
greyPlayerSteamIds = {}
greyPlayerHandGuids = {}
hitler = {}
imprisonInfo = {
	type = 'Custom_Model',
	mesh = 'http://cloud-3.steamusercontent.com/ugc/993492686551248783/B83B87475B885192F8F820E381F1D70A2E3F1919/',
	diffuse = 'http://cloud-3.steamusercontent.com/ugc/993492686551247160/63699220060380A49761207FF81A12E1AB00A597/',
	assetbundle = nil,
	assetbundle_secondary = nil,
	convex = true,
	image = nil,
	material = 2,
	specular_color = {0.737, 0.737, 0.737},
	specular_intensity = 0.9,
	specular_sharpness = 7.0,
	fresnel_strength = 0,
	use_grid = false,
	colorTint = {1, 1, 1},
	scale = {4, 4, 4},
	action = 'Imprisons',
	status = 'Imprisoned',
	shooterColor = nil
}
inspected = {}
jaCardGuids = {}
lastFascistPlayed = 0
lastLiberalPlayed = 0
lastChan = nil
lastPres = nil
lastVote = ''
mainNotes = ''
neinCardGuids = {}
notate = {
	line = nil,
	action = ''
}
noteTakerNotes = {}
noteTakerCurrLine = 0
options = {
	autoNotate = false,
	dealPartyCards = false,
	dealRoleCards = false,
	expansionAmount = 2,
	expansionOptionEnabled = 0, -- [1 SwapGov, 2 Reverse, 4 SwapPower, 8 SetupPowerAbilities]
	expansionOptionStatus = 0, -- [1 SwapGov, 2 Reverse]
	expansionOptionText = {'Pres -> Chan', 'Chan -> Pres', 'Clockwise', 'Counterclockwise'},
	fascistCards = 11,
	greyCards = 0,
	gameType = 0, -- [0 Original, 2 Custom]
	liberalCards = 6,
	noteType = 1, -- [1 Dark wood, 2 Light wood, 3 Red wood, 4 Black plastic, 5 Board image, 6 Swiss cheese, 7 Private only, 8 Cooperative]
	policySafety = true,
	scriptedVoting = true,
	shufflePlayers = false,
	shuffleHost = true,
	voteHistory = false,
	zoneType = 4 -- [1 None, 2 Small, 3 Gap (version 1), 4 Gap (version 2), 5 Large, 6 11-12 Players]
}
players = {}
playerRoleCardGuids = {}
playerStatusButtonGuids = {}
playerStatus = { --[1 Board, 2 Not Hitler, 3 Vote Only, 4 Silenced, 5 Dead, 6 Dead not Hitler]
	White = 1,
	Brown = 1,
	Red = 1,
	Orange = 1,
	Yellow = 1,
	Green = 1,
	Teal = 1,
	Blue = 1,
	Purple = 1,
	Pink = 1,
	Tan = 1,
	Maroon = 1
}
roles = {}
started = nil
text = {
	hitler = 'Hitler',
	liberal = 'Liberal',
	liberalAbbr = 'Liberal',
	liberalArticle = 'a',
	liberalLetter = 'L',
	fascist = 'Fascist',
	fascistAbbr = 'Fascist',
	fascistArticle = 'a',
	fascistLetter = 'F',
	grey = 'Grey',
	greyAbbr = 'Grey',
	greyArticle = 'a',
	greyLetter = 'G',
	policy = 'policy'
}
voteNotes = ''
voteNotebook = ''

-- Called when a game finishes loading
function onLoad(saveString)
	if not (saveString == '') then
		local save = JSON.decode(saveString)
		activePowerColor = save['a']
		bannerGuids = save['b']
		bulletInfo = save['bi']
		fascists = save['f']
		forcePres = save['fp']
		greyAvatarGuids = save['gag']
		greyPlayerSteamIds = save['gp']
		greyPlayerHandGuids = save['gphg']
		hitler = save['h']
		imprisonInfo = save['ii']
		inspected = save['in']
		jaCardGuids = save['ja']
		lastFascistPlayed = save['lfp']
		lastLiberalPlayed = save['llp']
		lastChan = save['lc']
		lastPres = save['lp']
		lastVote = save['lv']
		mainNotes = save['mn']
		neinCardGuids = save['nein']
		notate = save['note']
		noteTakerNotes = save['ntn']
		noteTakerCurrLine = save['ntcl']
		options = save['o']
		players = save['p']
		playerRoleCardGuids = save['prcg']
		playerStatus = save['ps']
		playerStatusButtonGuids = save['psbg']
		roles = save['r']
		started = save['s']
		text = save['t']
		voteNotes = save['vn']
		voteNotebook = save['vnb']
	end
	alwaysInit()
	if not started then
		mainNotes = '[FFFF00]Secret Hitler: Consolidator Edition\n' ..
						'Version ' ..  UPDATE_VERSION .. ' (' .. string.len(Global.getLuaScript()) .. ')\n' ..
						'\n[-]Based on the board game:\n\n[FF0000]Secret Hitler[-]\ndesigned by\n[0080F8]Max Temkin[-],\n[0080F8]Mike Boxleiter[-],\n[0080F8]Tommy Maranges[-]\nand Illustrated by\n[0080F8]Mackenzie Schubert.[-]\n\n' ..
						'Check the notebook for additional\ninformation and subscribe on the\nworkshop to make sure you have the\nlatest version.\n\n' ..
						'Only the president can draw cards.\n\nTo topdeck a card move the election tracker\nto the \34REVEAL & PASS TOP POLICY\34 circle.\n\n'
		setNotes(mainNotes)
		local status, err = pcall(init)
		if not status then
			printToAll('ERROR LOADING: ' .. err, {1,0,0})
		end
		settingsPannelMakeButtons()
		refreshBoardCards()
	end
	if not noteTakerCurrLine or noteTakerCurrLine == 0 then
		noteTakerNotes = {}
		noteTakerCurrLine = 0
		addNewLine()
	end
end

function onSave()
	local save = {}
	save['a'] = activePowerColor
	save['b'] = bannerGuids
	save['bi'] = bulletInfo
	save['f'] = fascists
	save['fp'] = forcePres
	save['gag'] = greyAvatarGuids
	save['gp'] = greyPlayerSteamIds
	save['gphg'] = greyPlayerHandGuids
	save['h'] = hitler
	save['ii'] = imprisonInfo
	save['in'] = inspected
	save['ja'] = jaCardGuids
	save['lfp'] = lastFascistPlayed
	save['llp'] = lastLiberalPlayed
	save['lc'] = lastChan
	save['lp'] = lastPres
	save['lv'] = lastVote
	save['mn'] = mainNotes
	save['nein'] = neinCardGuids
	save['note'] = notate
	save['ntn'] = noteTakerNotes
	save['ntcl'] = noteTakerCurrLine
	save['o'] = options
	save['p'] = players
	save['prcg'] = playerRoleCardGuids
	save['ps'] = playerStatus
	save['psbg'] = playerStatusButtonGuids
	save['r'] = roles
	save['s'] = started
	save['t'] = text
	save['vn'] = voteNotes
	save['vnb'] = voteNotebook
	local saveString = JSON.encode(save)

	return saveString
end

function refreshHiddenZones()
	for _, player in pairs(MAIN_PLAYABLE_COLORS) do
		if options.zoneType == 1 then
			--Hide the hidden zone so we can still use it later
			tmpObj = getObjectFromGUID(HIDDEN_ZONE_GUIDS[player])
			tmpObj.setScale({0.01, 0.01, 0.01})
			local colorToNumber = {White = 1, Brown = 2, Red = 3, Orange = 4, Yellow = 5, Green = 6, Teal = 7, Blue = 8, Purple = 9, Pink = 10}
			tmpObj.setPosition({100, 100, 100 + colorToNumber[player] * 2})
		elseif options.zoneType == 2 then
			tmpObj = getObjectFromGUID(HIDDEN_ZONE_GUIDS[player])
			tmpObj.setScale({15.3268776, 5.1, 6.35014629})
			forceObjectToPlayer(tmpObj, player, {forward = 0, right = 0, up = 0, forceHeight = 3.51}, NO_ROT)
		elseif options.zoneType == 3 then
			local pos = {White = {29.65, 3.51, -32.75}, Brown = {0, 3.51, -32.75}, Red = {-29.65, 3.51, -32.75}, Orange = {-50.2, 3.51, -19.25}, Yellow = {-50.2, 3.51, 19.25}, Green = {-29.65, 3.51, 32.75}, Teal = {0, 3.51, 32.75}, Blue = {29.65, 3.51, 32.75}, Purple = {50.2, 3.51, 19.25}, Pink = {50.2, 3.51, -19.25}}
			local scale = {White = {28.4, 5.1, 10.1}, Brown = {28.4, 5.1, 10.1}, Red = {28.4, 5.1, 10.1}, Orange = {9.55, 5.1, 37.25}, Yellow = {9.55, 5.1, 37.25}, Green = {28.4, 5.1, 10.1}, Teal = {28.4, 5.1, 10.1}, Blue = {28.4, 5.1, 10.1}, Purple = {9.55, 5.1, 37.25}, Pink = {9.55, 5.1, 37.25}}

			tmpObj = getObjectFromGUID(HIDDEN_ZONE_GUIDS[player])
			tmpObj.setPosition(pos[player])
			tmpObj.setScale(scale[player])
			tmpObj.setRotation(NO_ROT)
		elseif options.zoneType == 4 then
			local pos = {White = {29.65, 3.51, -31.9}, Brown = {0, 3.51, -31.9}, Red = {-29.65, 3.51, -31.9}, Orange = {-50.2, 3.51, -19.25}, Yellow = {-50.2, 3.51, 19.25}, Green = {-29.65, 3.51, 31.9}, Teal = {0, 3.51, 31.9}, Blue = {29.65, 3.51, 31.9}, Purple = {50.2, 3.51, 19.25}, Pink = {50.2, 3.51, -19.25}}
			local scale = {White = {28.4, 5.1, 11.8}, Brown = {28.4, 5.1, 11.8}, Red = {28.4, 5.1, 11.8}, Orange = {9.55, 5.1, 37.25}, Yellow = {9.55, 5.1, 37.25}, Green = {28.4, 5.1, 11.8}, Teal = {28.4, 5.1, 11.8}, Blue = {28.4, 5.1, 11.8}, Purple = {9.55, 5.1, 37.25}, Pink = {9.55, 5.1, 37.25}}

			tmpObj = getObjectFromGUID(HIDDEN_ZONE_GUIDS[player])
			tmpObj.setPosition(pos[player])
			tmpObj.setScale(scale[player])
			tmpObj.setRotation(NO_ROT)
		elseif options.zoneType == 5 then
			local pos = {White = {29.3, 3.51, -31.9}, Brown = {0, 3.51, -31.9}, Red = {-29.3, 3.51, -31.9}, Orange = {-49.4, 3.51, -19}, Yellow = {-49.4, 3.51, 19}, Green = {-29.3, 3.51, 31.9}, Teal = {0, 3.51, 31.9}, Blue = {29.3, 3.51, 31.9}, Purple = {49.4, 3.51, 19}, Pink = {49.4, 3.51, -19}}
			local scale = {White = {29.3, 5.1, 11.8}, Brown = {29.3, 5.1, 11.8}, Red = {29.3, 5.1, 11.8}, Orange = {10.8, 5.1, 38.0}, Yellow = {10.8, 5.1, 38.0}, Green = {29.3, 5.1, 11.8}, Teal = {29.3, 5.1, 11.8}, Blue = {29.3, 5.1, 11.8}, Purple = {10.8, 5.1, 38.0}, Pink = {10.8, 5.1, 38.0}}

			tmpObj = getObjectFromGUID(HIDDEN_ZONE_GUIDS[player])
			tmpObj.setPosition(pos[player])
			tmpObj.setScale(scale[player])
			tmpObj.setRotation(NO_ROT)
		elseif options.zoneType == 6 then
			local pos = {White = {-29.3, 3.51, -49.4}, Brown = {-49.4, 3.51, -29.3}, Red = {-49.4, 3.51, 0}, Orange = {-49.4, 3.51, 29.3}, Yellow = {-29.3, 3.51, 49.4}, Green = {0, 3.51, 49.4}, Teal = {29.3, 3.51, 49.4}, Blue = {49.4, 3.51, 29.3}, Purple = {49.4, 3.51, 0}, Pink = {49.4, 3.51, -29.3}}
			local scale = {White = {28.4, 5.1, 10.8}, Brown = {10.8, 5.1, 28.4}, Red = {10.8, 5.1, 28.4}, Orange = {10.8, 5.1, 28.4}, Yellow = {28.4, 5.1, 10.8}, Green = {28.4, 5.1, 10.8}, Teal = {28.4, 5.1, 10.8}, Blue = {10.8, 5.1, 28.4}, Purple = {10.8, 5.1, 28.4}, Pink = {10.8, 5.1, 28.4}}

			tmpObj = getObjectFromGUID(HIDDEN_ZONE_GUIDS[player])
			tmpObj.setPosition(pos[player])
			tmpObj.setScale(scale[player])
			tmpObj.setRotation(NO_ROT)

			local handPos = {White = {-29.3, 4.46, -51.66}, Brown = {-51.66, 4.46, -29.3}, Red = {-51.66, 4.46, 0}, Orange = {-51.66, 4.46, 29.3}, Yellow = {-29.3, 4.46, 51.66}, Green = {0, 4.46, 51.66}, Teal = {29.3, 4.46, 51.66}, Blue = {51.66, 4.46, 29.3}, Purple = {51.66, 4.46, 0}, Pink = {51.66, 4.46, -29.3}}
			local handRot = {White = {0, 0, 0}, Brown = {0, 90, 0}, Red = {0, 90, 0}, Orange = {0, 90, 0}, Yellow = {0, 180, 0}, Green = {0, 180, 0}, Teal = {0, 180, 0}, Blue = {0, 270, 0}, Purple = {0, 270, 0}, Pink = {0, 270, 0}}
			local handParams = {
				scale = {11.66, 5.4, 4.87}
			}

			handParams.position = handPos[player]
			handParams.rotation = handRot[player]
			Player[player].setHandTransform(handParams)

			tmpObj = getObjectFromGUID(policySafety_zone_guids[player])
			forceObjectToPlayer(tmpObj, player, {forward = 0, right = 0, up = 0, forceHeight = 3.51}, NO_ROT)
		end
	end
	if options.zoneType == 6 then
		broadcastToAll('Alpha release ... still work in progress.', {1,1,1})
		local params = {type = 'Custom_Model', sound = false}
		local tableExt = {}
		local custom = {
			mesh = 'http://cloud-3.steamusercontent.com/ugc/933812827275737908/4A39E65F99D7809D6055BED44C2B2AF420776850/',
			diffuse = 'http://cloud-3.steamusercontent.com/ugc/933812827275738471/DBC87C418A1CBD45F4EB56EB0F63B65E7F042F1F/',
			type = 4,
			material = 1,
			specular_color = {223/255, 207/255, 190/255},
			specular_intensity = 0.05,
			specular_sharpness = 6.3
		}
		for i = 1, 2 do
			tableExt[i] = spawnObject(params)
			tableExt[i].setCustomObject(custom)
			tableExt[i].setLock(true)
			tableExt[i].setRotation({0, 270, 0})
			tableExt[i].setScale({0.74, 1, 1})
			tableExt[i].setLuaScript(
				'function onLoad()\r\n' ..
				'	self.interactable = false\r\n' ..
				'end\r\n')
		end
		tableExt[1].setPosition({0, 0.1, -46.2})
		tableExt[2].setPosition({0, 0.1, 46.2})
		params = {
			type = 'Custom_Assetbundle',
			scale = {14.2, 2.55, 5.4},
			callback = 'greyPlayerHandCallback',
			sound = false
		}
		custom = {
			assetbundle = 'http://cloud-3.steamusercontent.com/ugc/933813375181578705/3961A9B3B73895140CA5055A8745BEE4A3E39299/'
		}
		local playerHands = {}
		for i, color in ipairs(GREY_PLAYABLE_COLORS) do
			playerHands[i] = spawnObject(params)
			playerHands[i].setCustomObject(custom)
			playerHands[i].setColorTint(GREY_PLAYABLE_COLORS_RGB[color])
			playerHands[i].setDescription(color .. ' Hand')
			playerHands[i].setLock(true)
		end
		playerHands[1].setPosition({29.3, 3.5, -49.4}) -- Tan
		playerHands[2].setPosition({0, 3.5, -49.4}) -- Maroon
		refreshUI()
	end
end

function onObjectEnterScriptingZone(zone, enterObject)
	if enterObject then
		if zone.guid == topdeck_zone_guid and enterObject.guid == ELECTION_TRACKER_GUID then
			editButtonByLabel(drawPileBoard_guid, 'Draw 3', 'Topdeck', 'topdeckCard')
		end
	end
end

function onObjectLeaveScriptingZone(zone, leaveObject)
	if leaveObject then
		if zone.guid == topdeck_zone_guid and leaveObject.guid == ELECTION_TRACKER_GUID then
			editButtonByLabel(drawPileBoard_guid, 'Topdeck', 'Draw 3', 'drawThree')
		elseif options.policySafety then
			if inTable(policySafety_zone_guids, zone.guid) and leaveObject.tag == 'Card' and
				(leaveObject.getDescription() == FASCISTPOLICY_STRING or
				 leaveObject.getDescription() == LIBERALPOLICY_STRING) then
				if not leaveObject.is_face_down and leaveObject.held_by_color then
					broadcastToColor('Keep your policy cards face down\nwhen removing them from your hand!', leaveObject.held_by_color, {1, 0, 0})
					leaveObject.deal(1, leaveObject.held_by_color)
				end
			end
		end
	end
end

function alwaysInit()
	local tmpObj

	-- Initialize the pseudo random number generator
	math.randomseed(os.time())

	refreshUI()
	refreshStatusButtons()
	refreshExpansionButtons()

	local drawPileBoard = getObjectFromGUID(drawPileBoard_guid)
	if drawPileBoard then
		local button = {
			click_function = 'drawThree',
			label = 'Draw 3',
			function_owner = Global,
			position = {0, 0.14, 3.7},
			rotation = {0, 0, 0},
			width = 2700,
			height = 1300,
			font_size = 650
		}
		drawPileBoard.createButton(button)
	end

	for _, cardGUID in ipairs(extraRole_card_guids) do
		local card = getObjectFromGUID(cardGUID)
		if card then card.interactable = false	end
	end
	tmpObj = getObjectFromGUID(fakeMembership_card_guid)
	if tmpObj then	tmpObj.interactable = false end
	tmpObj = getObjectFromGUID(fascistMembership_card_guid)
	if tmpObj then	tmpObj.interactable = false end
	tmpObj = getObjectFromGUID(liberalMembership_card_guid)
	if tmpObj then	tmpObj.interactable = false end
end

function refreshStatusButtons()
	local tmpObj
	local buttonGUID

	for _, buttonGUID in ipairs(playerStatusButtonGuids) do
		tmpObj = getObjectFromGUID(buttonGUID)
		if tmpObj then
			tmpObj.clearButtons()
			local ownerColor = tmpObj.getName()
			local button = {
				function_owner = self,
				position = {0, 0.2, 0},
				rotation = {0, 180, 0},
				width = 2900,
				height = 1500,
				font_size = 600,
				click_function = 'changePlayerStatus'
			}
			if _G.playerStatus[ownerColor] == 1 then
				if options.zoneType == 6 then
					local greenColors = {'Brown', 'Red', 'Blue', 'Purple'}
					if inTable(greenColors, ownerColor) then
						button.color = boardGreen_rgb
					else
						button.color = boardBrown_rgb
					end
				else
					button.color = boardGreen_rgb
				end
				button.label = ''
			elseif _G.playerStatus[ownerColor] == 2 then
				button.color = stringColorToRGB('Green')
				button.label = 'Not ' .. text.hitler
			elseif _G.playerStatus[ownerColor] == 3 then
				button.color = stringColorToRGB('Yellow')
				button.label = 'Vote Only'
			elseif _G.playerStatus[ownerColor] == 4 then
				button.color = stringColorToRGB('Blue')
				button.label = 'Silenced'
			elseif _G.playerStatus[ownerColor] == 5 then
				button.color = stringColorToRGB('Red')
				button.label = bulletInfo.status
			elseif _G.playerStatus[ownerColor] == 6 then
				button.color = stringColorToRGB('Red')
				button.label = bulletInfo.status .. '\nNot ' .. text.hitler
			else
				button.color = stringColorToRGB('Red')
				button.label = imprisonInfo.status
				button.font_size = 550
			end
			tmpObj.createButton(button)
		end
	end
end

function refreshExpansionButtons()
	local fasBoard = getObjectFromGUID(fasPannel_guid)
	if fasBoard then
		fasBoard.clearButtons()
		local button = {
			click_function = 'expansionOptionStatusSwapGov',
			function_owner = self,
			position = {12, 0.2, 6},
			rotation = {0, 0, 0},
			width = 2600,
			height = 800,
			font_size = 360
		}
		if bit32.band(options.expansionOptionStatus, 1) == 1 then
			button.font_color = {0, 0, 0}
			button.color =  stringColorToRGB('Orange')
			button.label = options.expansionOptionText[2]
		else
			button.font_color = stringColorToRGB('White')
			button.color =  boardGreen_rgb
			button.label = options.expansionOptionText[1]
		end
		if bit32.band(options.expansionOptionEnabled, 1) == 1 then
			fasBoard.createButton(button)
		end

		button.click_function = 'expansionOptionStatusReverse'
		button.position = {-12, 0.2, 6}
		button.width = 2800
		if bit32.band(options.expansionOptionStatus, 2) == 2 then
			button.font_color = {0, 0, 0}
			button.color =  stringColorToRGB('Orange')
			button.label = options.expansionOptionText[4]
		else
			button.font_color = stringColorToRGB('White')
			button.color =  boardGreen_rgb
			button.label = options.expansionOptionText[3]
		end
		if bit32.band(options.expansionOptionEnabled, 2) == 2 then
			fasBoard.createButton(button)
		end
	end
end

function init()
	local tmpObj

	tmpObj = getObjectFromGUID(hitler_deck_guid)
	if tmpObj == nil then error('Hitler Deck') end
	tmpObj.interactable = false
	tmpObj.setLock(true)

	for i = 1, #fascist_deck_guids do
		tmpObj = getObjectFromGUID(fascist_deck_guids[i])
		if tmpObj == nil then error('Fascist Deck ' .. fascist_deck_guids[i]) end
		tmpObj.interactable = false
		tmpObj.setLock(true)
	end

	for i = 1, #liberal_deck_guids do
		tmpObj = getObjectFromGUID(liberal_deck_guids[i])
		if tmpObj == nil then error('Liberal Deck ' .. liberal_deck_guids[i]) end
		tmpObj.interactable = false
		tmpObj.setLock(true)
	end

	tmpObj = getObjectFromGUID(fascist_deck_extra_guid)
	tmpObj.interactable = false
	tmpObj.setLock(true)

	tmpObj = getObjectFromGUID(liberal_deck_extra_guid)
	tmpObj.interactable = false
	tmpObj.setLock(true)

	tmpObj = getObjectFromGUID(PRESIDENT_GUID)
	if tmpObj == nil then error('President') end
	tmpObj.interactable = false
	tmpObj.setLock(true)
	tmpObj = getObjectFromGUID(CHANCELOR_GUID)
	if tmpObj == nil then error('Chancellor') end
	tmpObj.interactable = false
	tmpObj.setLock(true)
	tmpObj = getObjectFromGUID(PREV_PRESIDENT_GUID)
	if tmpObj == nil then error('Prev President') end
	tmpObj.setLock(true)
	tmpObj = getObjectFromGUID(PREV_CHANCELOR_GUID)
	if tmpObj == nil then error('Prev Chancellor') end
	tmpObj.setLock(true)

	tmpObj = getObjectFromGUID(ELECTION_TRACKER_GUID)
	if tmpObj == nil then error('Election Tracker') end
	tmpObj.setLock(true)

	for i, player in ipairs(MAIN_PLAYABLE_COLORS) do
		tmpObj = getObjectFromGUID(HIDDEN_ZONE_GUIDS[player])
		if tmpObj == nil then error(player .. ' Hidden Zone') end
	end

	--Expansion
	tmpObj = getDeckFromZoneByGUID(ABILITIESPILE_ZONE_GUID)
	if tmpObj then	tmpObj.interactable = false end
	tmpObj = getDeckFromZoneByGUID(EFFECTSPILE_ZONE_GUID)
	if tmpObj then	tmpObj.interactable = false end

	if options.gameType ~= 2 then
		--delete board cards
		testActionUsedPolicyZones(
			function(p) return isBoardCard(p) or isPolicyNotUsedCard(p) end,
			function(p) p.destruct() end,
			nil)
	end
end

function onChat(messageIn, player)
	local message = string.gsub(messageIn, '%s+', ' ')
	local messageTable = string.tokenize(message, ' ')
	messageTable[1] = string.lower(messageTable[1])

	if messageTable[1] == 'r' then
		if started then
			player:print(tellRole(player.color))
		else
			player:print('[FF0000]ERROR: Game not started.[-]')
		end
		return false
	elseif messageTable[1] == 'l' then
		player:print(lastVote)
		return false
	elseif messageTable[1] == 'h' then
		if options.voteHistory then
			player:print(string.gsub(voteNotebook, '\n$', ''))
		else
			player:print('[FF0000]ERROR: Full vote history is not enabled.[-]')
		end
		return false
	elseif messageTable[1] == 'n' then
		player:print(string.gsub(noteTakerNotesString(100, false, true), '\n$', ''))
		return false
	elseif messageTable[1] == 'o' then
		player:print(string.gsub(tableToString(options), '\n$', ''))
		return false
	elseif messageTable[1] == 'v' then
		player:print(versionInfo())
		return false
	elseif messageTable[1] == 'c' and (player.admin or inTable(trusted_players, player.steam_id)) then
		if messageTable[2] then
			messageTable[2] = string.titlecase(messageTable[2])
			if inTable(MAIN_PLAYABLE_COLORS, messageTable[2]) or messageTable[2] == 'Black' or messageTable[2] == 'Grey' then
				if messageTable[3] then
					local playerFound = getPlayerByNameSteamID(messageTable[3], Player.getPlayers())
					if playerFound then
						playerFound:changeColor(messageTable[2])
					else
						player:print('ERROR: ' .. messageTable[3] .. ' not found.', {1, 0, 0})
					end
				else
					player:changeColor(messageTable[2])
				end
			else
				player:print('ERROR: Unknown color ' .. messageTable[2] .. '.', {1, 0, 0})
			end
		else
			player:print('ERROR: No color given.', {1, 0, 0})
		end
		return false
	elseif messageTable[1] == 'promote' and (player.admin or inTable(trusted_players, player.steam_id)) then
		if messageTable[2] then
			local playerFound = getPlayerByNameSteamID(messageTable[2], Player.getPlayers())
			if playerFound then
				playerFound.promote()
			else
				player:print(messageTable[2] .. ' not found.', {1, 0, 0})
			end
		else
			player.promote()
		end
		return false
	elseif messageTable[1] == 'kick' and (player.admin or inTable(trusted_players, player.steam_id)) then
		if messageTable[2] then
			local playerFound = getPlayerByNameSteamID(messageTable[2], Player.getPlayers())
			if playerFound then
				playerFound.kick()
			else
				player:print(messageTable[2] .. ' not found.', {1, 0, 0})
			end
		end
		return false
	elseif messageTable[1] == 'list' and (player.admin or inTable(trusted_players, player.steam_id)) then
		for _, p in pairs(Player.getPlayers()) do
			player:print(p.steam_name .. ' ' .. p.steam_id)
		end
		return false
	elseif messageTable[1] == 'help' then
		player:print(chatHelp(player.admin))
		return false
	end

	for _, color in pairs(GREY_PLAYABLE_COLORS) do
		if greyPlayerSteamIds[color] == player.steam_id then
			printToAll("[" .. stringColorToHex(color) .. "]" .. player.steam_name .. ":[-] " .. messageIn)
			return false
		end
	end
end

function chatHelp(admin)
	local msg = 'chat commands:\n' ..
					'   r - All the role information you can know\n' ..
					'   l - Shows the last vote\n' ..
					'   h - Vote history\n' ..
					'   n - All of the notes\n' ..
					'   o - current options\n' ..
					'   v - Version info\n' ..
					'   help - This message'
	if admin then
		msg = msg .. '\nadmin chat commands:\n' ..
					'   c color [name* or steam id] - sets player to color\n' ..
					'   promote [name* or steam id] - promotes/demotes player\n' ..
					'   kick name* or steam id - kicks the player\n' ..
					'   list - lists steam ids\n' ..
					'   * partial name allowed but must be distinct'
	end

	return msg
end

function settingsPannelMakeButtons()
	local settingsPannel = getObjectFromGUID(settingsPannel_guid)
	if settingsPannel then
		settingsPannel.clearButtons()

		local buttonParam = {
			font_color = {0, 0, 0},
			rotation = {0, 0, 0},
			width = 0,
			height = 0,
			font_size = 480,
			function_owner = self,
			click_function = 'nullFunction'
		}
		local startX = -6.1
		local offsetZ = 1.32

		local startZ = -22.9
		buttonParam.label = '[u]Game Type[/u]'
		buttonParam.position = {0, 0.2, startZ - 1.4}
		settingsPannel.createButton(buttonParam)
		makeSquareButtonLabel(settingsPannel, options.gameType == 0, radio_string, '', 'Original', 'gameTypeZero', {startX, 0.2, startZ}, 2.45, not customOnly)
		makeSquareButtonLabel(settingsPannel, options.gameType == 2, radio_string, '', 'Custom', 'gameTypeTwo', {startX, 0.2, startZ + offsetZ * 1}, 2.3, true)
		makeDecIncButtonsLabel(settingsPannel, options.liberalCards, '-', '+', 'Liberal Cards', 'decLiberalCards', 'incLiberalCards', {startX + 1.3, 0.2, startZ + offsetZ * 2}, 6.1, false, options.gameType == 2)
		makeDecIncButtonsLabel(settingsPannel, options.fascistCards, '-', '+', 'Fascist Cards', 'decFascistCards', 'incFascistCards', {startX + 1.3, 0.2, startZ + offsetZ * 3}, 6.1, false, options.gameType == 2)
		makeDecIncButtonsLabel(settingsPannel, options.greyCards, '-', '+', 'Grey Cards', 'decGreyCards', 'incGreyCards', {startX + 1.3, 0.2, startZ + offsetZ * 4}, 5.65, false, options.gameType == 2)

		startZ = -14.5
		buttonParam.label = '[u]Note Taker[/u]'
		buttonParam.position = {0, 0.2, startZ - 1.4}
		settingsPannel.createButton(buttonParam)
		local labels = {'Dark wood', 'Light wood (tintable)', 'Red wood (tintable)', 'Black plastic', 'Board image', 'Swiss cheese', 'Private only', 'Cooperative'}
		local offsets = {4.4, 6.6, 6.3, 4.7, 4.7, 4.7, 4.6, 4.6}
		makeDecIncButtonsLabel(settingsPannel, options.noteType, '-', '+', labels, 'decNoteType', 'incNoteType', {startX, 0.2, startZ}, offsets, false, true)

		startZ = -11.6
		buttonParam.label = '[u]Hidden Zones[/u]'
		buttonParam.position = {0, 0.2, startZ - 1.4}
		settingsPannel.createButton(buttonParam)
		labels = {'None', 'Small', 'Gap (version 1)', 'Gap (version 2)', 'Large', '11-12 Players'}
		offsets = {3.2, 3.3, 5.3, 5.35, 3.3, 4.8}
		makeDecIncButtonsLabel(settingsPannel, options.zoneType, '-', '+', labels, 'decZoneType', 'incZoneType', {startX, 0.2, startZ}, offsets, false, options.zoneType ~= 6)

		startZ = -8.5
		buttonParam.label = '[u]Other Options[/u]'
		buttonParam.position = {0, 0.2, startZ - 1.4}
		settingsPannel.createButton(buttonParam)
		makeSquareButtonLabel(settingsPannel, options.dealRoleCards, check_string, '', 'Deal role', 'roleCardFlip', {startX, 0.2, startZ}, 2.7, true)
		makeSquareButtonLabel(settingsPannel, options.dealPartyCards, check_string, '', 'Deal party membership', 'partyCardFlip', {startX, 0.2, startZ + offsetZ}, 5.8, true)
		makeSquareButtonLabel(settingsPannel, options.scriptedVoting, check_string, '', 'Scripted voting', 'scriptedVotingFlip', {startX, 0.2, startZ + offsetZ * 2}, 4, true)
		makeSquareButtonLabel(settingsPannel, options.autoNotate, check_string, '', 'Auto notate', 'autoNotateFlip', {startX, 0.2, startZ + offsetZ * 3}, 3.4, true)
		makeSquareButtonLabel(settingsPannel, options.policySafety, check_string, '', 'Policy safety', 'policySafetyFlip', {startX, 0.2, startZ + offsetZ * 4}, 3.5, true)
		makeSquareButtonLabel(settingsPannel, options.voteHistory, check_string, '', 'Vote history', 'voteHistoryFlip', {startX, 0.2, startZ + offsetZ * 5}, 3.4, true)
		makeSquareButtonLabel(settingsPannel, options.shufflePlayers, check_string, '', 'Shuffle players', 'shufflePlayersFlip', {startX, 0.2, startZ + offsetZ * 6}, 4, true)
		makeSquareButtonLabel(settingsPannel, options.shuffleHost, check_string, '', 'Shuffle host', 'shuffleHostFlip', {startX + 1.3, 0.2, startZ + offsetZ * 7}, 3.3, options.shufflePlayers)

		--Expansion
		local abilitiesDeck = getDeckFromZoneByGUID(ABILITIESPILE_ZONE_GUID)
		if abilitiesDeck then
			startZ = 3.7
			buttonParam.label = '[u]Fan Expansion[/u]'
			buttonParam.position = {0, 0.2, startZ - 1.4}
			settingsPannel.createButton(buttonParam)
			makeDecIncButtonsLabel(settingsPannel, options.expansionAmount, '-', '+', 'Cards', 'decExpansionAmount', 'incExpansionAmount', {startX, 0.2, startZ}, 4.7, false, true)
			makeSquareButtonLabel(settingsPannel, bit32.band(options.expansionOptionEnabled, 1) == 1, check_string, '', 'Swap government', 'expansionOptionEnabledSwapGov', {startX, 0.2, startZ + offsetZ}, 4.7, true)
			makeSquareButtonLabel(settingsPannel, bit32.band(options.expansionOptionEnabled, 4) == 4, check_string, '', 'Swap power', 'expansionOptionEnabledSwapPower', {startX + 1.3, 0.2, startZ + offsetZ * 2}, 3.4, bit32.band(options.expansionOptionEnabled, 1) == 1)
			makeSquareButtonLabel(settingsPannel, bit32.band(options.expansionOptionEnabled, 2) == 2, check_string, '', 'Reverse', 'expansionOptionEnabledReverse', {startX, 0.2, startZ + offsetZ * 3}, 2.4, true)
			makeSquareButtonLabel(settingsPannel, bit32.band(options.expansionOptionEnabled, 8) == 8, check_string, '', 'Setup power abilities', 'expansionOptionEnabledSetupPowerAbilities', {startX, 0.2, startZ + offsetZ * 4}, 5.3, true)
		end

		buttonParam = {
			click_function = 'setupStart',
			label = 'Start',
			function_owner = self,
			position = {0, 0.2, 23.5},
			rotation = {0, 0, 0},
			width = 3300,
			height = 1700,
			font_size = 750
		}
		settingsPannel.createButton(buttonParam)
	else
		printToAll('ERROR: Settings pannel not found.', {1,0,0})
	end
end

function makeSquareButtonLabel(objectIn, valueIn, trueButtonTextIn, falseButtonTextIn, labelTextIn, clickFunctionIn, buttonPositionIn, textOffsetIn, enabledIn)
	local buttonParam = {
		rotation = {0, 0, 0},
		width = 600,
		height = 600,
		font_size = 480,
		function_owner = self,
		click_function = clickFunctionIn,
		position = buttonPositionIn
	}
	local textParam = {
		label = labelTextIn,
		font_color = {0, 0, 0},
		rotation = {0, 0, 0},
		width = 0,
		height = 0,
		font_size = 480,
		function_owner = self,
		click_function = 'nullFunction',
		position = {buttonPositionIn[1] + textOffsetIn, buttonPositionIn[2], buttonPositionIn[3]}
	}
	if valueIn then
		buttonParam.label = trueButtonTextIn
	else
		buttonParam.label = falseButtonTextIn
	end
	if not enabledIn then
		buttonParam.click_function = 'nullFunction'
		buttonParam.color = stringColorToRGB('Grey')
		buttonParam.font_color = {0.3, 0.3, 0.3}
		textParam.font_color = {0.3, 0.3, 0.3}
	end
	objectIn.createButton(buttonParam)
	objectIn.createButton(textParam)
end

function makeDecIncButtonsLabel(objectIn, valueIn, decButtonTextIn, incButtonTextIn, labelTextIn, decFunctionIn, incFunctionIn, positionIn, textOffsetIn, showValueIn, enabledIn)
	local buttonParam = {
		font_color = {0, 0, 0},
		rotation = {0, 0, 0},
		width = 0,
		height = 0,
		font_size = 480,
		function_owner = self,
		click_function = 'nullFunction'
	}

	local valueOffset
	if type(labelTextIn) == 'table' then
		valueOffset = 0
		buttonParam.label = labelTextIn[valueIn]
		buttonParam.position = {positionIn[1] + textOffsetIn[valueIn], positionIn[2], positionIn[3]}
	else
		valueOffset = 1.3
		buttonParam.label = labelTextIn
		buttonParam.position = {positionIn[1] + textOffsetIn, positionIn[2], positionIn[3]}
	end
	if not enabledIn then
		buttonParam.font_color = {0.3, 0.3, 0.3}
	end
	objectIn.createButton(buttonParam)

	if not enabledIn then
		buttonParam.color = stringColorToRGB('Grey')
	end
	buttonParam.label = decButtonTextIn
	buttonParam.position = positionIn
	buttonParam.width = 600
	buttonParam.height = 600
	if enabledIn then
		buttonParam.click_function = decFunctionIn
	end
	objectIn.createButton(buttonParam)

	buttonParam.label = incButtonTextIn
	buttonParam.position = {positionIn[1] + 1.3 + valueOffset, positionIn[2], positionIn[3]}
	if enabledIn then
		buttonParam.click_function = incFunctionIn
	end
	objectIn.createButton(buttonParam)

	if valueOffset > 0 then
		buttonParam.label = valueIn
		if enabledIn then
			buttonParam.click_function = incFunctionIn
		end
		buttonParam.position = {positionIn[1] + valueOffset, positionIn[2], positionIn[3]}
		objectIn.createButton(buttonParam)
	end
end

function gameTypeZero(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.gameType = 0
		options.fascistCards = 11
		options.liberalCards = 6
		options.greyCards = 0
		refreshBoardCards()
		settingsPannelMakeButtons()
	end
end

function gameTypeTwo(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.gameType = 2
		refreshBoardCards()
		settingsPannelMakeButtons()
	end
end

function decNoteType(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.noteType > 1 then
			options.noteType = options.noteType - 1
		end
		settingsPannelMakeButtons()
	end
end

function incNoteType(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.noteType < 8 then
			options.noteType = options.noteType + 1
		end
		settingsPannelMakeButtons()
	end
end

function decZoneType(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.zoneType > 1 then
			options.zoneType = options.zoneType - 1
		end
		refreshHiddenZones()
		settingsPannelMakeButtons()
	end
end

function incZoneType(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.zoneType < 6 then
			options.zoneType = options.zoneType + 1
		end
		refreshHiddenZones()
		settingsPannelMakeButtons()
	end
end

function roleCardFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.dealRoleCards = not options.dealRoleCards
		settingsPannelMakeButtons()
	end
end

function partyCardFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.dealPartyCards = not options.dealPartyCards
		settingsPannelMakeButtons()
	end
end

function scriptedVotingFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.scriptedVoting = not options.scriptedVoting
		settingsPannelMakeButtons()
	end
end

function autoNotateFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.autoNotate = not options.autoNotate
		settingsPannelMakeButtons()
	end
end

function policySafetyFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.policySafety = not options.policySafety
		settingsPannelMakeButtons()
	end
end

function voteHistoryFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.voteHistory = not options.voteHistory
		settingsPannelMakeButtons()
	end
end

function shufflePlayersFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.shufflePlayers = not options.shufflePlayers
		settingsPannelMakeButtons()
	end
end

function shuffleHostFlip(clickedObject, playerColor)
	if Player[playerColor].admin then
		options.shuffleHost = not options.shuffleHost
		settingsPannelMakeButtons()
	end
end

function expansionOptionEnabledSwapGov(clickedObject, playerColor)
	if Player[playerColor].admin then
		if bit32.band(options.expansionOptionEnabled, 1) == 1 then
			options.expansionOptionEnabled = options.expansionOptionEnabled - 1
		else
			options.expansionOptionEnabled = options.expansionOptionEnabled + 1
		end
		refreshExpansionButtons()
		settingsPannelMakeButtons()
	end
end

function expansionOptionEnabledReverse(clickedObject, playerColor)
	if Player[playerColor].admin then
		if bit32.band(options.expansionOptionEnabled, 2) == 2 then
			options.expansionOptionEnabled = options.expansionOptionEnabled - 2
		else
			options.expansionOptionEnabled = options.expansionOptionEnabled + 2
		end
		refreshExpansionButtons()
		settingsPannelMakeButtons()
	end
end

function expansionOptionEnabledSwapPower(clickedObject, playerColor)
	if Player[playerColor].admin then
		if bit32.band(options.expansionOptionEnabled, 4) == 4 then
			options.expansionOptionEnabled = options.expansionOptionEnabled - 4
		else
			options.expansionOptionEnabled = options.expansionOptionEnabled + 4
		end
		settingsPannelMakeButtons()
	end
end

function expansionOptionEnabledSetupPowerAbilities(clickedObject, playerColor)
    if Player[playerColor].admin then
        if bit32.band(options.expansionOptionEnabled, 8) == 8 then
            options.expansionOptionEnabled = options.expansionOptionEnabled - 8
        else
            options.expansionOptionEnabled = options.expansionOptionEnabled + 8
        end
        refreshExpansionButtons()
        settingsPannelMakeButtons()
    end
end

function expansionOptionStatusSwapGov(clickedObject, playerColor)
	if Player[playerColor].admin then
		if bit32.band(options.expansionOptionStatus, 1) == 1 then
			options.expansionOptionStatus = options.expansionOptionStatus - 1
		else
			options.expansionOptionStatus = options.expansionOptionStatus + 1
		end
		refreshExpansionButtons()
	end
end

function expansionOptionStatusReverse(clickedObject, playerColor)
	if Player[playerColor].admin then
		if bit32.band(options.expansionOptionStatus, 2) == 2 then
			options.expansionOptionStatus = options.expansionOptionStatus - 2
		else
			options.expansionOptionStatus = options.expansionOptionStatus + 2
		end
		refreshExpansionButtons()
	end
end

function decLiberalCards(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.liberalCards > 5 then
			options.liberalCards = options.liberalCards - 1
		end
		settingsPannelMakeButtons()
	end
end

function incLiberalCards(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.liberalCards < 8 then
			options.liberalCards = options.liberalCards + 1
		end
		settingsPannelMakeButtons()
	end
end

function decFascistCards(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.fascistCards > 10 then
			options.fascistCards = options.fascistCards - 1
		end
		settingsPannelMakeButtons()
	end
end

function incFascistCards(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.fascistCards < 15 then
			options.fascistCards = options.fascistCards + 1
		end
		settingsPannelMakeButtons()
	end
end

function decGreyCards(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.greyCards > 0 then
			options.greyCards = options.greyCards - 1
		end
		settingsPannelMakeButtons()
	end
end

function incGreyCards(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.greyCards < 2 then
			options.greyCards = options.greyCards + 1
		end
		settingsPannelMakeButtons()
	end
end

function decExpansionAmount(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.expansionAmount > 0 then
			options.expansionAmount = options.expansionAmount - 1
		end
		settingsPannelMakeButtons()
	end
end

function incExpansionAmount(clickedObject, playerColor)
	if Player[playerColor].admin then
		if options.expansionAmount < 4 then
			options.expansionAmount = options.expansionAmount + 1
		end
		settingsPannelMakeButtons()
	end
end

function addJaCard(cardIn)
	local player = string.gsub(cardIn.getDescription(), '\'s Ja Card', '')
	jaCardGuids[player] = cardIn.getGUID()
end

function addNeinCard(cardIn)
	local player = string.gsub(cardIn.getDescription(), '\'s Nein Card', '')
	neinCardGuids[player] = cardIn.getGUID()
end

function displayBannerCardsCoroutine()
	local tmpZone = getObjectFromGUID(bannerZoneGuid)
	local inZone = tmpZone.getObjects()
	local policyCard = nil
	local boardCard = nil

	-- get the cards
	for _, j in ipairs(inZone) do
		if isPolicyCard(j) then
			policyCard = j
		elseif isBoardCard(j) and not isSubBoardCard(j) then
			boardCard = j
		end
	end

	-- kill old banners
	if bannerGuids then
		for _, j in ipairs(bannerGuids) do
			destroyObjectByGUID(j)
		end
	end
	bannerGuids = {}

	-- display and board card handler
	if policyCard and boardCard and not topdeck then
		displayBannerCard(policyCard, -14.5, 0)
		displayBannerCard(boardCard, 20.5, 4)
		boardCardHandler(boardCard)
	else
		displayBannerCard(policyCard, 0, 0)
		if lastPres and not topdeck then
			movePlacards(nextPres(lastPres), true)
		end
	end

	topdeck = false

	-- Win check
	if lastLiberalPlayed > 5 or lastFascistPlayed > 6 then
		if not options.dealRoleCards then giveRoleCards() end
	end

	return true
end

function displayBannerCard(card, offset, bannerGuidsOffset)
	local bannerCard = {}
	local params = {sound = false}
	params.snap_to_grid = false
	params.position = {offset, 33, 144}
	bannerCard[1] = card.clone(params)
	params.position = {-offset, 33, -144}
	bannerCard[2] = card.clone(params)
	params.position = {144, 33, -offset}
	bannerCard[3] = card.clone(params)
	params.position = {-144, 33, offset}
	bannerCard[4] = card.clone(params)
	wait(5)
	bannerCard[1].setRotation({90, 180, 0})
	bannerCard[2].setRotation({90, 0, 0})
	bannerCard[3].setRotation({90, 270, 0})
	bannerCard[4].setRotation({90, 90, 0})
	for i, j in ipairs(bannerCard) do
		bannerCard[i].setScale({13, 0, 13})
		bannerCard[i].setLock(true)
		bannerCard[i].interactable = false
		bannerGuids[i + bannerGuidsOffset] = bannerCard[i].guid
	end
end

function boardCardHandler(card)
	local powerHolder = lastPres
	if bit32.band(options.expansionOptionEnabled, 4) == 4 and bit32.band(options.expansionOptionStatus, 1) == 1 then
		powerHolder = lastChan
	end
	if powerHolder then
		if isBoardCardInspect(card) then
			--expansion
			local abilitiesDeck = getDeckFromZoneByGUID(ABILITIESPILE_ZONE_GUID)
			if abilitiesDeck then
				broadcastToAll('Delaying inspect 5 seconds...', {1,1,1})
				sleep(5)
			end
			if not options.dealPartyCards then createInspectButtons(powerHolder) end
			if options.autoNotate then
				notateInfo(powerHolder, 'inspects', '', '', true)
			end
		elseif isBoardCardPickPres(card) then
			if options.autoNotate then
				notateInfo(powerHolder, 'gives pres to', '', '', true)
			end
		elseif isBoardCardBullet(card) then
			giveBullet(powerHolder)
			bulletInfo.shooterColor = powerHolder
			if options.autoNotate then
				notateInfo(powerHolder, string.lower(bulletInfo.action), '', '', true)
			end
		elseif isBoardCardImprison(card) then
			giveImprison(powerHolder)
			imprisonInfo.shooterColor = powerHolder
			if options.autoNotate then
				notateInfo(powerHolder, string.lower(imprisonInfo.action), '', '', true)
			end
		elseif isBoardCardTopCard(card) then
			smartBroadcastToColor('Examine the top card from the deck and put it back in the draw pile.', powerHolder, {1, 1, 1})
			drawCards(1, powerHolder)
			if options.autoNotate then
				notateInfo(powerHolder, 'examines deck:', '', '', false)
			end
		elseif isBoardCardTopThree(card) then
			smartBroadcastToColor('Examine the top three cards from the deck and put them back in the draw pile (right to left to keep the order).', powerHolder, {1, 1, 1})
			drawCards(3, powerHolder)
			if options.autoNotate then
				notateInfo(powerHolder, 'examines deck:', '', '', false)
			end
		end
	else
		printToAll('ERROR: Player ' .. powerHolder .. ' not found.', {1,0,0})
	end

	if powerHolder and lastPres then
		if isBoardCardPickPres(card) then
			local saveForcePres = forcePres
			forcePres = nil
			movePlacards(powerHolder, true)
			if saveForcePres then
				forcePres = saveForcePres
			else
				forcePres = nextPres(lastPres)
			end
		else
			movePlacards(nextPres(lastPres), true)
		end
	end
end

function nextPres(playerIn)
	local nextList
	if bit32.band(options.expansionOptionStatus, 2) == 2 then
		nextList = {White = 'Maroon', Brown = 'White', Red = 'Brown', Orange = 'Red', Yellow = 'Orange', Green = 'Yellow', Teal = 'Green', Blue = 'Teal', Purple = 'Blue', Pink = 'Purple', Tan = 'Pink', Maroon = 'Tan'}
	else
		nextList = {White = 'Brown', Brown = 'Red', Red = 'Orange', Orange = 'Yellow', Yellow = 'Green', Green = 'Teal', Teal = 'Blue', Blue = 'Purple', Purple = 'Pink', Pink = 'Tan', Tan = 'Maroon', Maroon = 'White'}
	end
	local checkPres = playerIn
	local returnVal = nextList[checkPres]

	while not inTable(players, returnVal) or (_G.playerStatus[returnVal] == 3) or (_G.playerStatus[returnVal] > 4)  do
		checkPres = returnVal
		returnVal = nextList[checkPres]
	end

	return returnVal
end

function movePlacards(playerIn, returnVoteCards)
	local moveToPlayer = playerIn
	if forcePres then
		moveToPlayer = forcePres
		forcePres = nil
	end

	--Expansion
	expansionCounters()

	if options.scriptedVoting and returnVoteCards then
		returnVoteCardsToHand()
		disableVote = false
		blockDraw = false
		votePassed = false
	end

	local tmpPres = getObjectFromGUID(PRESIDENT_GUID)
	tmpPres.setVar('lastPres', moveToPlayer)
	if tmpPres then giveObjectToPlayer(tmpPres, moveToPlayer, {forward = 11, right = 0, up = 0, forceHeight = 2.2}, NO_ROT, false, false) end
	local tmpChan = getObjectFromGUID(CHANCELOR_GUID)
	if tmpChan then giveObjectToPlayer(tmpChan, moveToPlayer, {forward = 11, right = 0, up = 0, forceHeight = 2.8}, NO_ROT, false, false) end
end

function giveBullet(playerIn)
	giveBulletImprison(playerIn, bulletInfo, "markDead")
end

function markDead(tableIn)
	if type(tableIn) == 'table' then
		local victimColor = closestPlayer(tableIn[1], players, 18)
		if victimColor and victimColor ~= bulletInfo.shooterColor then
			bulletInfo.shooterColor = nil
			_G.playerStatus[victimColor] = 5
			refreshStatusButtons()
			Wait.time(function() tableIn[1].setLock(true) end, 2)
			if options.autoNotate then
				if notate.line and notate.action == string.lower(bulletInfo.action) then
					notateColor2ByObject(tableIn)
				end
			end
		end
	end
end

function giveImprison(playerIn)
	giveBulletImprison(playerIn, imprisonInfo, "markImprisoned")
end

function markImprisoned(tableIn)
	if type(tableIn) == 'table' then
		local victimColor = closestPlayer(tableIn[1], players, 18)
		if victimColor and victimColor ~= imprisonInfo.shooterColor then
			imprisonInfo.shooterColor = nil
			_G.playerStatus[victimColor] = 7
			refreshStatusButtons()
			Wait.time(function() tableIn[1].setLock(true) end, 2)
			if options.autoNotate then
				if notate.line and notate.action == string.lower(imprisonInfo.action) then
					notateColor2ByObject(tableIn)
				end
			end
		end
	end
end

function giveBulletImprison(playerIn, itemInfo, funcName)
	local params = {type = itemInfo.type, sound = false}
	local item = spawnObject(params)
	custom = {
		mesh = itemInfo.mesh,
		diffuse = itemInfo.diffuse,
		assetbundle = itemInfo.assetbundle,
		assetbundle_secondary = itemInfo.assetbundle_secondary,
		image = itemInfo.image,
		convex = itemInfo.convex,
		material = itemInfo.material,
		specular_color = itemInfo.specular_color,
		specular_intensity = itemInfo.specular_intensity,
		specular_sharpness = itemInfo.specular_sharpness,
		fresnel_strength = itemInfo.fresnel_strength
	}
	item.use_grid = itemInfo.use_grid
	item.setCustomObject(custom)
	item.setColorTint(itemInfo.colorTint)
	item.setScale(itemInfo.scale)
	item.setLuaScript(
			'function onDrop(playerColor)\r\n' ..
			'	Global.call(\'' .. funcName .. '\', {self})\r\n' ..
			'end\r\n')
	wait(5)
	item.setPosition({0, 30, 0})
	giveObjectToPlayer(item, playerIn, {forward = 20, right = 0, up = 0, forceHeight = 6}, NO_ROT)
end

function createPolicyCardWait()
	if policyWaitId then
		Wait.stop(policyWaitId)
	end
	policyWaitId = Wait.time(function() startPolicyCardCheck() end, 1)
end

function startPolicyCardCheck()
	if not Global.getVar('hold') then
		Global.setVar('hold', true)
		startLuaCoroutine(Global, 'policyCardCoroutine')
	end
end

function policyCardCoroutine()
	local cardLists = {}
	local drawZone = nil
	local discardZone = nil

	local homeTracker = function()
		local tracker = getObjectFromGUID(ELECTION_TRACKER_GUID)
		if tracker then
			tracker.setPositionSmooth(electionTrackerOrgPos)
			tracker.setRotationSmooth({0, 315, 0})
		end
	end

	local movePrevPlacards = function()
		if lastPres and lastChan then
			local tmpPres = getObjectFromGUID(PREV_PRESIDENT_GUID)
			if tmpPres then giveObjectToPlayer(tmpPres, lastPres, {forward = 11, right = 0, up = 0, forceHeight = 1.1}, NO_ROT, false, false) end
			local tmpChan = getObjectFromGUID(PREV_CHANCELOR_GUID)
			if tmpChan then giveObjectToPlayer(tmpChan, lastChan, {forward = 11, right = 0, up = 0, forceHeight = 1.1}, NO_ROT, false, false) end
		end
	end

	local homePrevPlacards = function()
		local tmpPres = getObjectFromGUID(PREV_PRESIDENT_GUID)
		if tmpPres then
			tmpPres.setRotationSmooth(PREV_PRESIDENT_ROT, false, false)
			tmpPres.setPositionSmooth(PREV_PRESIDENT_POS, false, false)
		end
		local tmpChan = getObjectFromGUID(PREV_CHANCELOR_GUID)
		if tmpChan then
			tmpChan.setRotationSmooth(PREV_CHANCELOR_ROT, false, false)
			tmpChan.setPositionSmooth(PREV_CHANCELOR_POS, false, false)
		end
	end

	drawZone = getObjectFromGUID(DRAW_ZONE_GUID)
	discardZone = getObjectFromGUID(DISCARD_ZONE_GUID)

	if drawZone == nil or discardZone == nil then
		return true
	end

	-- Get the status of all cards and decks from the zones
	cardLists = getPolicyCardStatus(true)

	-- protect the cards
	if #cardLists.drawDeckList == 1 and #cardLists.drawList > 1 then
		local tmpDeck = getObjectFromGUID(cardLists.drawDeckList[1])
		if tmpDeck then
			tmpDeck.interactable = false
		end
	end
	if #cardLists.discardDeckList == 1 and #cardLists.discardList > 1 then
		local tmpDeck = getObjectFromGUID(cardLists.discardDeckList[1])
		if tmpDeck then
			tmpDeck.interactable = false
		end
	end

	--Expansion
	tmpObj = getDeckFromZoneByGUID(ABILITIESPILE_ZONE_GUID)
	if tmpObj then tmpObj.interactable = false end
	tmpObj = getDeckFromZoneByGUID(EFFECTSPILE_ZONE_GUID)
	if tmpObj then tmpObj.interactable = false end

	-- Msg if cards are added to the draw deck
	if lastDrawCt and #cardLists.drawList > lastDrawCt and #cardLists.drawDeckList == 1 then
		broadcastToAll('WARNING: One or more cards have been added to the draw deck!', {1,0,0})
	end
	lastDrawCt = #cardLists.drawList

	if started and #cardLists.fascistList > options.fascistCards then
		broadcastToAll('CHEATING DETECTED: Too many ' .. text.fascistAbbr ..  ' ' .. text.policy .. ' cards.', {1,0,0})
	end
	if started and #cardLists.liberalList > options.liberalCards then
		broadcastToAll('CHEATING DETECTED: Too many ' .. text.liberalAbbr ..  ' ' .. text.policy .. ' cards.', {1,0,0})
	end
	if started and #cardLists.greyList > options.greyCards then
		broadcastToAll('CHEATING DETECTED: Too many ' .. text.greyAbbr ..  ' ' .. text.policy .. ' cards.', {1,0,0})
	end

	-- Location of all cards is known
	if started and #cardLists.fascistList == options.fascistCards and #cardLists.liberalList == options.liberalCards and #cardLists.greyList == options.greyCards and (#cardLists.discardDeckList == 0 or #cardLists.discardDeckList == 1) then
		-- Reshuffle
		local autoNotateReshuffle = false
		if #cardLists.drawList < 3 and #cardLists.discardDeckList == 1 and (#cardLists.drawDeckList == 0 or #cardLists.drawDeckList == 1) then
			if cardLists.drawDeckList[1] then
				local tmpDeck = getObjectFromGUID(cardLists.drawDeckList[1])
				pos = tmpDeck.getPosition()
			else
				pos = getPositionByGUID(DRAW_ZONE_GUID)
			end
			broadcastToAll('Starting reshuffle...', {1,1,1})
			local discardDeck = getObjectFromGUID(cardLists.discardDeckList[1])
			discardDeck.setPositionSmooth({pos['x'], 3, pos['z']}, false, true)
			sleep(2)
			local expectedCards = #cardLists.drawList + #cardLists.discardList
			local drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
			if drawDeck and #drawDeck.getObjects() == expectedCards then
				lastDrawCt = expectedCards
				drawDeck.shuffle()
				broadcastToAll('reshuffle done.', {1,1,1})
				if options.autoNotate then
					autoNotateReshuffle = true
				end
				local discardPileBoard = getObjectFromGUID(discardPileBoard_guid)
				if discardPileBoard then
					discardPileBoard.setName(0)
				end
			else
				broadcastToAll('ERROR: reshuffle FAILED! Please fix the issue.', {1,0,0})
				startLuaCoroutine(Global, 'disableSecurityCoroutine')
				return true
			end
		end

		-- Banners and board card handler
		if #cardLists.liberalPlayedList > 0 and (#cardLists.liberalPlayedList + #cardLists.liberalNotUsedList) > lastLiberalPlayed then
			lastLiberalPlayed = #cardLists.liberalPlayedList + #cardLists.liberalNotUsedList
			bannerZoneGuid = liberal_zone_guids[lastLiberalPlayed]
			tmpZone = getObjectFromGUID(bannerZoneGuid)
			inZone = tmpZone.getObjects()
			local cardType = nil
			for i, j in ipairs(inZone) do
				if isLiberalPolicyCard(j) and not j.is_face_down then
					cardType = text.liberalLetter
				elseif isGreyPolicyCard(j) and not j.is_face_down then
					cardType = text.greyLetter
				end
			end
			if cardType then
				if options.autoNotate then
					if topdeck then
						notateInfo('', 'Topdeck:', '', '[0080F8]' .. cardType .. '[-]', false)
					elseif bit32.band(options.expansionOptionStatus, 1) == 1 then
						notateInfo(lastChan, '>', lastPres, '[0080F8]' .. cardType .. '[-]', false)
					else
						notateInfo(lastPres, '>', lastChan, '[0080F8]' .. cardType .. '[-]', false)
					end
					homeTracker()
				end
				if topdeck then
					homePrevPlacards()
				else
					movePrevPlacards()
				end
				startLuaCoroutine(Global, 'displayBannerCardsCoroutine')
			else
				lastLiberalPlayed = 0 -- didn't find the card
			end
		elseif #cardLists.fascistPlayedList > 0 and (#cardLists.fascistPlayedList + #cardLists.fascistNotUsedList) > lastFascistPlayed then
			lastFascistPlayed = #cardLists.fascistPlayedList + #cardLists.fascistNotUsedList
			bannerZoneGuid = fascist_zone_guids[lastFascistPlayed]
			tmpZone = getObjectFromGUID(bannerZoneGuid)
			inZone = tmpZone.getObjects()
			local cardType = nil
			for i, j in ipairs(inZone) do
				if isFascistPolicyCard(j) and not j.is_face_down then
					cardType = text.fascistLetter
				elseif isGreyPolicyCard(j) and not j.is_face_down then
					cardType = text.greyLetter
				end
			end
			if cardType then
				if options.autoNotate then
					if topdeck then
						notateInfo('', 'Topdeck:', '', '[FF0000]' .. cardType .. '[-]', false)
					elseif bit32.band(options.expansionOptionStatus, 1) == 1 then
						notateInfo(lastChan, '>', lastPres, '[FF0000]' .. cardType .. '[-]', false)
					else
						notateInfo(lastPres, '>', lastChan, '[FF0000]' .. cardType .. '[-]', false)
					end
					homeTracker()
					if lastFascistPlayed == 4 then notateInfo('', '', '', '[FF0000]' .. text.hitler .. ' territory![-]', false) end
				end
				if topdeck then
					homePrevPlacards()
				else
					movePrevPlacards()
				end
				startLuaCoroutine(Global, 'displayBannerCardsCoroutine')
			else
				lastFascistPlayed = 0 -- didn't find the card
			end
		end
		if autoNotateReshuffle then notateInfo('', '', '', '*Reshuffle*', false) end
		if lastLiberalPlayed or lastFascistPlayed then
			-- Lock placed policy cards
			if boardCardWaitId then
				Wait.stop(boardCardWaitId)
			end
			boardCardWaitId = Wait.time(
				function()
					testReadyToLock(
						function(p)
							return isPolicyCard(p) and not p.is_face_down
						end, boardCardWaitId)
				end, 1, -1)
		end
	end

	Global.setVar('hold', false)

	return true
end

function getPolicyCardStatus(removeCards)
	local returnTable = {}
	returnTable.fascistList = {}
	returnTable.fascistPlayedList = {}
	returnTable.fascistNotUsedList = {}
	returnTable.liberalList = {}
	returnTable.liberalPlayedList = {}
	returnTable.liberalNotUsedList = {}
	returnTable.greyList = {}
	returnTable.drawList = {}
	returnTable.drawDeckList = {}
	returnTable.discardList = {}
	returnTable.discardDeckList = {}
	local removeCt = 0
	local cardError = false
	local drawZone = nil
	local discardZone = nil

	drawZone = getObjectFromGUID(DRAW_ZONE_GUID)
	discardZone = getObjectFromGUID(DISCARD_ZONE_GUID)

	local inZone = drawZone.getObjects()
	for i, j in ipairs(inZone) do
		if isFascistPolicyCard(j) then
			smartTableInsert(returnTable.fascistList, j.guid)
			smartTableInsert(returnTable.drawList, j.guid)
			smartTableInsert(returnTable.drawDeckList, j.guid)
		elseif isLiberalPolicyCard(j) then
			smartTableInsert(returnTable.liberalList, j.guid)
			smartTableInsert(returnTable.drawList, j.guid)
			smartTableInsert(returnTable.drawDeckList, j.guid)
		elseif isGreyPolicyCard(j) then
			smartTableInsert(returnTable.greyList, j.guid)
			smartTableInsert(returnTable.drawList, j.guid)
			smartTableInsert(returnTable.drawDeckList, j.guid)
		elseif j.tag == 'Deck' then
			smartTableInsert(returnTable.drawDeckList, j.guid)
			local inDeck = j.getObjects()
			for k, l in ipairs(inDeck) do
				if l.description == FASCISTPOLICY_STRING then
					smartTableInsert(returnTable.fascistList, l.guid)
					smartTableInsert(returnTable.drawList, l.guid)
				elseif l.description == LIBERALPOLICY_STRING then
					smartTableInsert(returnTable.liberalList, l.guid)
					smartTableInsert(returnTable.drawList, l.guid)
				elseif l.description == GREYPOLICY_STRING then
					smartTableInsert(returnTable.greyList, l.guid)
					smartTableInsert(returnTable.drawList, l.guid)
				elseif removeCards and removeCt < (#inDeck - 1) then
					local params = {}
					params.position = {0,5,0}
					params.guid = l.guid
					local card = j.takeObject(params)
					if not cardError then
						cardError = true
						printToAll('ERROR: That is not a policy card.', {1,0,0})
					end
					removeCt = removeCt + 1
				end
			end
		end
	end
	removeCt = 0
	inZone = discardZone.getObjects()
	for i, j in ipairs(inZone) do
		if j.tag == 'Deck' then
			smartTableInsert(returnTable.discardDeckList, j.guid)
			local inDeck = j.getObjects()
			for k, l in ipairs(inDeck) do
				if l.description == FASCISTPOLICY_STRING then
					smartTableInsert(returnTable.fascistList, l.guid)
					smartTableInsert(returnTable.discardList, l.guid)
				elseif l.description == LIBERALPOLICY_STRING then
					smartTableInsert(returnTable.liberalList, l.guid)
					smartTableInsert(returnTable.discardList, l.guid)
				elseif l.description == GREYPOLICY_STRING then
					smartTableInsert(returnTable.greyList, l.guid)
					smartTableInsert(returnTable.discardList, l.guid)
				elseif removeCards and removeCt < (#inDeck - 1) then
					local params = {}
					params.position = {0,5,0}
					params.guid = l.guid
					local card = j.takeObject(params)
					if not cardError then
						cardError = true
						printToAll('ERROR: That is not a policy card.', {1,0,0})
					end
					removeCt = removeCt + 1
				end
			end
		end
	end
	local tmpZoneGuid
	local tmpZone
	local cardFound = false
	for i = #liberal_zone_guids, 1, -1 do
		tmpZone = getObjectFromGUID(liberal_zone_guids[i])
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if isLiberalPolicyCard(j) then
					smartTableInsert(returnTable.liberalList, j.guid)
					smartTableInsert(returnTable.liberalPlayedList, j.guid)
					cardFound = true
				elseif isGreyPolicyCard(j) then
					smartTableInsert(returnTable.greyList, j.guid)
					smartTableInsert(returnTable.liberalPlayedList, j.guid)
					cardFound = true
				elseif isPolicyNotUsedCard(j) and cardFound then
					smartTableInsert(returnTable.liberalNotUsedList, j.guid)
				end
			end
		end
	end
	cardFound = false
	for i = #fascist_zone_guids, 1, -1 do
		tmpZone = getObjectFromGUID(fascist_zone_guids[i])
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if isFascistPolicyCard(j) then
					smartTableInsert(returnTable.fascistList, j.guid)
					smartTableInsert(returnTable.fascistPlayedList, j.guid)
					cardFound = true
				elseif isGreyPolicyCard(j) then
					smartTableInsert(returnTable.greyList, j.guid)
					smartTableInsert(returnTable.fascistPlayedList, j.guid)
					cardFound = true
				elseif isPolicyNotUsedCard(j) and cardFound then
					smartTableInsert(returnTable.fascistNotUsedList, j.guid)
				end
			end
		end
	end

	return returnTable
end

function allPolicyCardsKnown()
	local cardLists = {}

	cardLists = getPolicyCardStatus(false)
	if started and #cardLists.fascistList == options.fascistCards and #cardLists.liberalList == options.liberalCards and #cardLists.greyList == options.greyCards and #cardLists.drawDeckList == 1 and (#cardLists.discardDeckList == 0 or #cardLists.discardDeckList == 1) then
		return true
	end

	return false
end

function createVoteWait()
	if not disableVote then
		if voteWaitId then
			Wait.stop(voteWaitId)
		end
		voteWaitId = Wait.time(function() startVoteCheck() end, 1)
	end
end

function startVoteCheck()
	local jaVote
	local neinVote
	local voteDone = true
	local pos
	votes = {}

	for i, playerColor in pairs(players) do
		jaVote = 0
		neinVote = 0
		jaCard = getObjectFromGUID(jaCardGuids[playerColor])
		neinCard = getObjectFromGUID(neinCardGuids[playerColor])
		if greyPlayer(playerColor) then
			ph = getObjectFromGUID(greyPlayerHandGuids[playerColor])
			if ph then
				pos = ph.getPosition()
				pos = {x = pos['x'], y = pos['y'], z = pos['z'] - 2.26}
			end
		else
			local ph = Player[playerColor].getPlayerHand()
			if ph then
				pos = {x = ph['pos_x'], y = ph['pos_y'], z = ph['pos_z']}
			end
		end
		if pos and jaCard and neinCard and not (_G.playerStatus[playerColor] > 3) then
			local distance = findDistance(jaCard.getPosition(), pos);
			if distance > 8 then
				if jaCard.is_face_down and not jaCard.held_by_color then
					jaVote = 1
				else
					voteDone = false
				end
			end
			distance = findDistance(neinCard.getPosition(), pos);
			if distance > 8 then
				if neinCard.is_face_down and not neinCard.held_by_color then
					neinVote = -1
				else
					voteDone = false
				end
			end
		end
		votes[playerColor] = jaVote + neinVote
		if (jaVote + neinVote) == 0 and not (_G.playerStatus[playerColor] > 3) then
			voteDone = false
		end
	end

	if voteDone then
		voteNotes = getFinalVoteString()
		setNotes(voteNotes .. '\n\n' .. mainNotes)
		local presColor = getPres()
		local chanColor = getChan()
		local out = '[' .. stringColorToHex(presColor) .. ']' .. presColor .. '[-] > '
		out = out .. '[' .. stringColorToHex(chanColor) .. ']' .. chanColor .. '[-]\n'
		out = out .. voteNotes
		if voteNotebook == '' then
			voteNotebook = out
		else
			voteNotebook = voteNotebook .. '\n\n' .. out
		end
		lastVote = out
		for _, lastVoteGuid in ipairs(lastVote_guids) do
			local lastVoteObj = getObjectFromGUID(lastVoteGuid)
			if lastVoteObj then lastVoteObj.TextTool.setValue(removeBBCode(out)) end
		end
		flipVotes()
		disableVote = true
		if string.find(out, 'Vote passes') then
			votePassed = true
		else
			votePassed = false
		end
	else
		voteNotes = getPrelimVoteString()
		setNotes(voteNotes .. '\n\n' .. mainNotes)
	end
end

function expansionCounters()
	local allObjs = getAllObjects()
	local tmpObj

	for _, tmpObj in ipairs(allObjs) do
		if tmpObj then
			if tmpObj.tag == 'Counter' and (string.match(tmpObj.getName(), 'Turns') or string.match(tmpObj.getName(), 'Rounds')) then
				tmpObj.Counter.decrement()
			end
		end
	end
end

function waitReturnVoteCardsCoroutine()
	sleep(5)
	returnVoteCardsToHand()
	disableVote = false
	blockDraw = false
	votePassed = false

	return true
end

function flipVotes()
	for i, playerColor in pairs(players) do
		jaCard = getObjectFromGUID(jaCardGuids[playerColor])
		neinCard = getObjectFromGUID(neinCardGuids[playerColor])
		if greyPlayer(playerColor) then
			ph = getObjectFromGUID(greyPlayerHandGuids[playerColor])
			if ph then
				pos = ph.getPosition()
				pos = {x = pos['x'], y = pos['y'], z = pos['z'] - 2.26}
			end
		else
			local ph = Player[playerColor].getPlayerHand()
			if ph then
				pos = {x = ph['pos_x'], y = ph['pos_y'], z = ph['pos_z']}
			end
		end
		if pos and jaCard and neinCard and not (_G.playerStatus[playerColor] > 3) then
			local distance = findDistance(jaCard.getPosition(), pos);
			if distance > 8 then jaCard.flip() end
			distance = findDistance(neinCard.getPosition(), pos);
			if distance > 8 then neinCard.flip() end
		end
	end
end

function returnVoteCardsToHand()
	for i, playerColor in pairs(players) do
		jaCard = getObjectFromGUID(jaCardGuids[playerColor])
		neinCard = getObjectFromGUID(neinCardGuids[playerColor])
		if jaCard and neinCard then
			if greyPlayer(playerColor) then
				giveObjectToPlayer(jaCard, playerColor, {forward = GREY_FORWARD, right = GREY_RIGHT, up = GREY_UP}, {x = 0, y = 180, z = 180, exactRot = true}, false, true)
				giveObjectToPlayer(neinCard, playerColor, {forward = GREY_FORWARD, right = GREY_RIGHT, up = GREY_UP}, {x = 0, y = 180, z = 180, exactRot = true}, false, true)
			else
				local jaCardRot = jaCard.getRotation()
				local neinCardRot = neinCard.getRotation()
				giveObjectToPlayer(jaCard, playerColor, {forward = 0, right = 0, up = 0}, {x = jaCardRot["x"], y = jaCardRot["y"], z = jaCardRot["z"], exactRot = true}, false, true)
				giveObjectToPlayer(neinCard, playerColor, {forward = 0, right = 0, up = 0}, {x = neinCardRot["x"], y = neinCardRot["y"], z = neinCardRot["z"], exactRot = true}, false, true)
			end
		end
	end
end

function getFinalVoteString()
	local jaCount = 0
	local neinCount = 0
	local out = '[i]Ja votes[/i]: '
	for i, playerColor in pairs(ALL_PLAYABLE_COLORS) do -- used for the order
		if votes[playerColor] == 1 and inTable(players, playerColor) then
			if string.sub(out, -1) == ']' then out = out .. ', ' end
			out = out .. '[' .. stringColorToHex(playerColor) .. ']' .. playerColor .. '[-]'
			jaCount = jaCount + 1
		end
	end
	if jaCount == 0 then out = out .. 'None' end
	out = out .. '[/i]\n[i]Nein votes[/i]:[i] '
	for i, playerColor in pairs(ALL_PLAYABLE_COLORS) do -- used for the order
		if votes[playerColor] == -1 and inTable(players, playerColor) then
			if string.sub(out, -1) == ']' then out = out .. ', ' end
			out = out .. '[' .. stringColorToHex(playerColor) .. ']' .. playerColor .. '[-]'
			neinCount = neinCount + 1
		end
	end
	if neinCount == 0 then out = out .. 'None' end
	out = out .. '[/i]'
	if jaCount > neinCount then
		broadcastToAll('Vote passes', stringColorToRGB('Green'))
		out = '[' .. stringColorToHex('Green') .. ']-<<<<· Vote passes <══¦-•\n' .. '[-]' .. out
	else
		broadcastToAll('Vote fails', stringColorToRGB('Red'))
		out = '[' .. stringColorToHex('Red') .. ']-<<<<· Vote fails <══¦-•\n' .. '[-]' .. out
		if options.autoNotate then
			local lineSave = noteTakerCurrLine
			noteTakerCurrLine = #noteTakerNotes
			if not noteTakerBlankLine(noteTakerCurrLine) then
				addNewLine()
				noteTakerCurrLine = #noteTakerNotes
			end
			noteTakerNotes[noteTakerCurrLine].color1 = getPres()
			noteTakerNotes[noteTakerCurrLine].action = '>'
			noteTakerNotes[noteTakerCurrLine].color2 = getChan()
			noteTakerNotes[noteTakerCurrLine].result = '[222222]Downvoted[-]'
			noteTakerCurrLine = lineSave
			refreshNotes(nil)
			local tracker = getObjectFromGUID(ELECTION_TRACKER_GUID)
			if tracker then
				tracker.translate({electionTrackerMoveX, 0, 0})
			end
		end
		movePlacards(nextPres(getPres()), false)
		startLuaCoroutine(Global, 'waitReturnVoteCardsCoroutine')
	end

	return out
end

function getPrelimVoteString()
	local out = '[u]Voted[/u]:[i] '
	for i, playerColor in pairs(ALL_PLAYABLE_COLORS) do -- used for the order
		if votes[playerColor] ~= 0 and inTable(players, playerColor) and not (_G.playerStatus[playerColor] > 3) then
			if string.sub(out, -1) == ']' then out = out .. ', ' end
			out = out .. '[' .. stringColorToHex(playerColor) .. ']' .. playerColor .. '[-]'
		end
	end
	out = out .. '[/i]\n[u]Waiting on[/u]:[i] '
	for i, playerColor in pairs(ALL_PLAYABLE_COLORS) do -- used for the order
		if votes[playerColor] == 0 and inTable(players, playerColor) and not (_G.playerStatus[playerColor] > 3) then
			if string.sub(out, -1) == ']' then out = out .. ', ' end
			out = out .. '[' .. stringColorToHex(playerColor) .. ']' .. playerColor .. '[-]'
		end
	end
	out = out .. '[/i]'

	return out
end

function editButtonByLabel(objectGUIDIn, oldLabelIn, newLabelIn, newFunctionIn)
	local bObject = getObjectFromGUID(objectGUIDIn)
	if bObject then
		local buttonList = bObject.getButtons()
		if buttonList then
			local button
			for _, button in ipairs(buttonList) do
				if button.label == oldLabelIn then
					button.label = newLabelIn
					button.click_function = newFunctionIn
					bObject.editButton(button)
				end
			end
		end
	end
end

function topdeckCard(clickedObject, playerColor)
	if started then
		if playerColor == getPres() then
			drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
			if drawDeck then
				lastPres = playerColor
				topdeck = true
				local params = {}
				params.position = {0, 2, 0}
				params.flip = true
				local card = drawDeck.takeObject(params)
				if isLiberalPolicyCard(card) then
					broadcastToAll('The topdeck is '.. text.liberalArticle .. ' ' .. text.liberal .. ' ' .. text.policy .. '!', {0.1, 0.3, 1})
				else
					broadcastToAll('The topdeck is '.. text.fascistArticle .. ' ' .. text.fascist .. ' ' .. text.policy .. '!', {1,0,0})
				end
			else
				broadcastToAll('ERROR: Draw deck not found.', {1, 0, 0})
			end
		else
			printToColor('ERROR: You are not the president.', playerColor, {1, 0, 0})
		end
	else
		printToColor('ERROR: Game not started.', playerColor, {1, 0, 0})
	end
end

function drawThree(clickedObject, playerColor)
	if started then
		local drawPlayer = getPres()
		local drawPlayerText = 'president'
		if bit32.band(options.expansionOptionStatus, 1) == 1 then
			drawPlayer = getChan()
			drawPlayerText = 'chancellor'
		end
		if playerColor == drawPlayer then
			if blockDraw then
				smartBroadcastToColor('ERROR: You can only draw once (move the Chancellor placard to reset).', playerColor, {1, 0, 0})
			else
				if not options.scriptedVoting or votePassed then
					blockDraw = true
					drawCards(3, playerColor)
				else
					smartBroadcastToColor('ERROR: Vote did not pass.', playerColor, {1, 0, 0})
				end
			end
		else
			smartBroadcastToColor('ERROR: You are not the ' .. drawPlayerText .. '.', playerColor, {1, 0, 0})
		end
	else
		smartBroadcastToColor('ERROR: Game not started.', playerColor, {1, 0, 0})
	end
end

function drawCards(amount, playerColor)
	local drawCt = 0
	local drawDeck = nil

	drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
	if drawDeck then
		drawCt = #drawDeck.getObjects()
		if drawCt > (amount - 1) then
			lastPres = getPres()
			lastChan = getChan()
			if greyPlayer(playerColor) then
				deal12P(amount, playerColor)
			else
				drawDeck.deal(amount, playerColor)
			end
			if amount == 1 then
				broadcastToAll('Dealing 1 card to ' .. playerColor .. '.', stringColorToRGBExtra(playerColor))
			else
				broadcastToAll('Dealing ' .. amount .. ' cards to ' .. playerColor .. '.', stringColorToRGBExtra(playerColor))
			end
		else
			broadcastToAll('ERROR: Too few cards to deal.', {1, 0, 0})
		end
	else
		broadcastToAll('ERROR: Draw deck not found.', {1, 0, 0})
	end
end

function getPres()
	local tempObj = getObjectFromGUID(PRESIDENT_GUID)
	return closestPlayer(tempObj, players, 1000)
end

function getChan()
	local tempObj = getObjectFromGUID(CHANCELOR_GUID)
	return closestPlayer(tempObj, players, 1000)
end

function onPlayerChangedColor(color)
	refreshUI()
	if started then
		if color ~= 'Grey' and color ~= 'Black' then
			printToColor('--------------------------------------',color, {1, 1, 1})
			printToColor('Welcome! ' .. Player[color].steam_name,color, {1, 1, 1})
			printToColor('--------------------------------------',color, {1, 1, 1})
			Player[color]:print(tellRole(color))
			printToColor('--------------------------------------',color, {1, 1, 1})
			Player[color]:print(chatHelp(Player[color].admin))
		elseif color == 'Black' then
			printToAll('--------------------------------------', {1, 1, 1})
			local hcol = stringColorToRGBExtra(color)
			printToAll('All hail the omniscient Black player ' .. Player[color].steam_name, {hcol['r'], hcol['g'], hcol['b']})
			printToAll('--------------------------------------', {1, 1, 1})
			Player[color]:print(tellRole(color))
			printToColor('--------------------------------------',color, {1, 1, 1})
			Player[color]:print(chatHelp(Player[color].admin))
		end
	else
		local needRefresh = true
		if lastPlayerCt then
			if lastPlayerCt < 7 and #getSeatedPlayers() < 7 then
				needRefresh = false
			elseif lastPlayerCt > 6 and lastPlayerCt < 9 and
					 #getSeatedPlayers() > 6 and #getSeatedPlayers() < 9 then
				needRefresh = false
			elseif lastPlayerCt > 8 and #getSeatedPlayers() > 8 then
				needRefresh = false
			end
		end
		if needRefresh then
			refreshBoardCards()
		end
	end

	if options.zoneType == 6 and color ~= 'Grey' then
		local colorFound = nil

		for testColor, steamId in pairs(greyPlayerSteamIds) do
			if steamId == Player[color].steam_id then
				colorFound = testColor
				break
			end
		end
		if colorFound then
			greyPlayerSteamIds[colorFound] = nil
			destroyObjectByGUID(greyAvatarGuids[colorFound])
			local textObj = getObjectFromGUID(GREY_TEXT_GUIDS[colorFound])
			if textObj then
				textObj.TextTool.setValue(' ')
			end
		end
	end
end

function setupStart(clickedObject, playerColor)
	if Player[playerColor].admin then
		startLuaCoroutine(Global, 'setupCoroutine')
	else
		broadcastToColor('Only the host or a promoted player can start the game.', playerColor, {1,0,0})
	end
end

function setupCoroutine()
	local tmpObj

	--Get seated players
	players = getSeatedPlayers()

	if #players < 5 then
		printToAll('Not enough players!', {1,1,1})
		return true
	end

	local playerOneName = Player[players[1]].steam_name
	if not playerOneName or string.match(playerOneName, 'Player %d') then
		printToAll('Hotseat game detected.', {1,1,1})
		if options.shufflePlayers then
			options.shufflePlayers = false
			printToAll('Shuffle players is now disabled.', {1,0,0})
		end
		if options.policySafety then
			options.policySafety = false
			printToAll('Policy safety is now disabled.', {1,0,0})
		end
	end

	if options.shufflePlayers then
		printToAll('Shuffling Players...', {1,1,1})
		shufflePlayers()
		printToAll('shuffling done.', {1,1,1})
	end

	--Hidden zones and status buttons
	for i, player in pairs(MAIN_PLAYABLE_COLORS) do
		if not inTable(players, player) then
			destroyObjectByGUID(HIDDEN_ZONE_GUIDS[player])
		else
			if options.zoneType == 1 then
				local params = {
					type = 'BlockRectangle',
					scale = {15, 0.25, 0.5},
					position = {-100, 100, -100},
					sound = false
				}
				local block = spawnObject(params)
				block.setColorTint(stringColorToRGB(player))
				block.setLock(true)
				forceObjectToPlayer(block, player, {forward = 7, right = 0, up = 0, forceHeight = 1.09}, FACE_UP_ROT)
			end
			-- Player Status Buttons
			local paramsStatus = {
				type = 'backgammon_piece_white',
				position = {-100, 100, -100},
				callback = 'statusButtonCallback',
				sound = false
			}
			local buttonStatusBase = spawnObject(paramsStatus)
			buttonStatusBase.setName(player)
			buttonStatusBase.setColorTint(stringColorToRGB(player))
			buttonStatusBase.setLock(true)
			forceObjectToPlayer(buttonStatusBase, player, {forward = 11, right = -8.5, up = 0, forceHeight = 1.09}, FACE_UP_ROT)
		end
	end
	if options.zoneType == 6 then -- Tan and Maroon
		local paramsStatus = {
			type = 'backgammon_piece_white',
			callback = 'statusButtonCallback',
			sound = false
		}
		for _, color in ipairs(GREY_PLAYABLE_COLORS) do
			if greyPlayerSteamIds[color] then
				table.insert(players, 1, color)
				local buttonStatusBase = spawnObject(paramsStatus)
				buttonStatusBase.setName(color)
				buttonStatusBase.setColorTint(stringColorToRGBExtra(color))
				buttonStatusBase.setRotation({0, 180, 0})
				buttonStatusBase.setLock(true)
				forceObjectToPlayer(buttonStatusBase, color, {forward = 11, right = -8.5, up = 0, forceHeight = 1.09}, FACE_UP_ROT)
			else
				destroyObjectByGUID(greyPlayerHandGuids[color])
			end
		end
	end
	if #players > 10 then
		table.insert(fascist_deck_guids, 1, fascist_deck_extra_guid)
	else
		destroyObjectByGUID(fascist_deck_extra_guid)
	end
	if #players > 11 then
		table.insert(liberal_deck_guids, 1, liberal_deck_extra_guid)
	else
		destroyObjectByGUID(liberal_deck_extra_guid)
	end

	--Expansion
	local abilitiesDeck = getDeckFromZoneByGUID(ABILITIESPILE_ZONE_GUID)
	if abilitiesDeck then
		abilitiesDeck.randomize()
		for _, player in pairs(players) do
			if greyPlayer(player) then
				for i = 1, options.expansionAmount, 1 do
					local params = {}
					local card = abilitiesDeck.takeObject(params)
					if card then
						giveObjectToPlayer(card, player, {forward = GREY_FORWARD, right = GREY_EXPANSION_RIGHT, up = GREY_UP}, FACE_DOWN_ROT, false, true)
					end
				end
			else
				abilitiesDeck.deal(options.expansionAmount, player)
			end
		end
		if bit32.band(options.expansionOptionEnabled, 8) == 8 then
			Wait.frames(function() setupPowerAbilities(abilitiesDeck) end, 2)
		end
	else
		local tmpZone = getObjectFromGUID(ABILITIESPILE_ZONE_GUID)
		if tmpZone then
			local inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				destroyObject(j)
			end
			destroyObject(tmpZone)
		end
		tmpZone = getObjectFromGUID(EFFECTSPILE_ZONE_GUID)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				destroyObject(j)
			end
			destroyObject(tmpZone)
		end
	end

	--spawn note taker(s)
	local params = {position = {-100, 100, -100}, sound = false}
	if options.noteType == 1 then
		params.type = 'Chess_Board'
		params.scale = {1.55, 1.55, 1.55}
	elseif options.noteType == 2 then
		params.type = 'Go_Board'
		params.scale = {1.45, 1.45, 1.45}
	elseif options.noteType == 3 then
		params.type = 'Checker_Board'
		params.scale = {1.55, 1.55, 1.55}
	elseif options.noteType == 4 then
		params.type = 'reversi_board'
		params.scale = {1.45, 1.45, 1.45}
	elseif options.noteType == 5 then
		params.type = 'Custom_Board'
		params.scale = {1, 1, 1}
	elseif options.noteType == 6 then
		params.type = 'Custom_Model'
		params.scale = {1.05, 1.05, 1.05}
	elseif options.noteType > 6 then
		params.type = 'backgammon_board'
		params.scale = {1.8, 1.8, 1.8}
	end
	for _, player in pairs(players) do
		if not greyPlayer(player) then
			if Player[player].admin or options.noteType > 6 then
				local notetaker = spawnObject(params)
				if options.noteType < 7 then
					notetaker.setLuaScript(newNoteTakerLuaScript(player, 'true', 'false', 'false', 'false', 'false', 'true'))
				elseif options.noteType == 7 then
					notetaker.setLuaScript(newNoteTakerLuaScript(player, 'false', 'false', 'false', 'false', 'false', 'false'))
				elseif options.noteType == 8 then
					notetaker.setLuaScript(newNoteTakerLuaScript(player, 'false', 'true', 'false', 'false', 'false', 'false'))
				end
				if options.noteType == 5 then
					local custom = {}
					custom.image = 'http://cloud-3.steamusercontent.com/ugc/486766424829587499//FDF54ECD5D1706DE0A590239E84D62CDE757FE46/'
					notetaker.setCustomObject(custom)
				elseif options.noteType == 6 then
						local custom = {}
						custom.diffuse = 'http://cloud-3.steamusercontent.com/ugc/478894184492866532/6639B6E1AB511AB10D53DB91B2A47A0A63410DDF/'
						custom.mesh = 'http://cloud-3.steamusercontent.com/ugc/478894184492865468/51C18F993BBDD5D1B55FE5261A625B2CE0B2FD9F/'
						custom.type = 4
						custom.material = 3
						notetaker.setCustomObject(custom)
				end
			end
		end
	end

	--destroy the settings pannel
	destroyObjectByGUID(settingsPannel_guid)

	local numFascists = 0

	--figure out number of fascists
	if #players > 10 then
		numFascists = 4
	elseif #players > 8 then
		numFascists = 3
	elseif #players > 6 then
		numFascists = 2
	else
		numFascists = 1
	end

	printToAll( #players .. ' player game starting!', {1,1,1})

	local fascistDecks = {}
	local liberalDecks = {}

	for i = 1, #fascist_deck_guids do
 		fascistDecks[i] = getObjectFromGUID(fascist_deck_guids[i])
 	end
 	for i = 1, #liberal_deck_guids do
 		liberalDecks[i] = getObjectFromGUID(liberal_deck_guids[i])
 	end

	shuffleTable(fascistDecks)
	shufflePosition(fascistDecks)
	shuffleTable(liberalDecks)
	shufflePosition(liberalDecks)

	wait(5)

	--Figure out which decks we're using
	local player_decks = {}
	for i = 1, #players do
		if i == 1 then
			player_decks[i] = getObjectFromGUID(hitler_deck_guid)
		elseif i <= numFascists+1 then
			player_decks[i] = fascistDecks[i-1]
		else
			player_decks[i] = liberalDecks[i-numFascists-1]
		end
	end

	--Cleanup Extra Cards
	for i = numFascists + 1, #fascist_deck_guids do
		destroyObject(fascistDecks[i])
	end
	for i = #players - numFascists, #liberal_deck_guids do
		destroyObject(liberalDecks[i])
	end

	--Shuffle Roles/Players
	shuffleTable(player_decks)
	shufflePosition(player_decks)
	shuffleTable(players)

	wait(5)

	--Deal the Cards
	for i, player in ipairs(players) do
		for j = 1, #player_decks[i].getObjects() do
			local params = {}
			local card = player_decks[i].takeObject(params)

			local description = card.getDescription()
			local offset = 0;

			if description == 'Hitler Role Card' then
				roles[player] = 'hitler'
				table.insert(hitler, 1, player)
				offset = -2
			elseif description == 'Fascist Role Card' then
				roles[player] = 'fascist'
				table.insert(fascists, 1, player)
				offset = -2
			elseif description == 'Liberal Role Card' then
				roles[player] = 'liberal'
				offset = -2
			elseif description == 'Fascist Party Card' or
				description == 'Liberal Party Card' then
				offset = -1
				if options.dealPartyCards then
					if greyPlayer(player) then
						giveObjectToPlayer(card, player, {forward = GREY_FORWARD, right = GREY_RIGHT, up = GREY_UP}, FACE_DOWN_ROT, false, true)
					else
						giveObjectToPlayer(card, player, {forward = 0, right = offset, up = 0}, FACE_DOWN_ROT, false, true)
					end
				else
					destroyObject(card)
				end
			elseif description == 'Ja Card' then
				card.setDescription(player .. '\'s Ja Card')
				card.setLuaScript(
					'collision = false -- workaround for rewind error\r\n' ..
					'\r\n' ..
					'function onObjectSpawn(spawnObject)\r\n' ..
					'	Global.call(\'callFunction\', {fcn = \'addJaCard\', params = {self}})\r\n' ..
					'end\r\n' ..
					'\r\n' ..
					'function onDrop(playerColor)\r\n' ..
					'	local options = Global.getTable(\'options\')\r\n' ..
					'	if options.scriptedVoting then\r\n' ..
					'		collision = true\r\n' ..
					'		Global.call(\'createVoteWait\')\r\n' ..
					'	end\r\n' ..
					'end\r\n' ..
					'\r\n' ..
					'function onCollisionEnter(collisionInfo)\r\n' ..
					'	local options = Global.getTable(\'options\')\r\n' ..
					'	if collision and options.scriptedVoting then\r\n' ..
					'		Global.call(\'createVoteWait\')\r\n' ..
					'	end\r\n' ..
					'end\r\n')
				card.setScale({1.51, 1, 1.51})
				offset = 1
				if greyPlayer(player) then
					giveObjectToPlayer(card, player, {forward = GREY_FORWARD, right = GREY_RIGHT, up = GREY_UP}, FACE_DOWN_ROT, false, true)
				else
					giveObjectToPlayer(card, player, {forward = 0, right = offset, up = 0}, FACE_DOWN_ROT, false, true)
				end
			elseif description == 'Nein Card' then
				card.setDescription(player .. '\'s Nein Card')
				card.setLuaScript(
					'collision = false -- workaround for rewind error\r\n' ..
					'\r\n' ..
					'function onObjectSpawn(spawnObject)\r\n' ..
					'	Global.call(\'callFunction\', {fcn = \'addNeinCard\', params = {self}})\r\n' ..
					'end\r\n' ..
					'\r\n' ..
					'function onDrop(playerColor)\r\n' ..
					'	local options = Global.getTable(\'options\')\r\n' ..
					'	if options.scriptedVoting then\r\n' ..
					'		collision = true\r\n' ..
					'		Global.call(\'createVoteWait\')\r\n' ..
					'	end\r\n' ..
					'end\r\n' ..
					'\r\n' ..
					'function onCollisionEnter(collisionInfo)\r\n' ..
					'	local options = Global.getTable(\'options\')\r\n' ..
					'	if collision and options.scriptedVoting then\r\n' ..
					'		Global.call(\'createVoteWait\')\r\n' ..
					'	end\r\n' ..
					'end\r\n')
				card.setScale({1.51, 1, 1.51})
				offset = 2
				if greyPlayer(player) then
					giveObjectToPlayer(card, player, {forward = GREY_FORWARD, right = GREY_RIGHT, up = GREY_UP}, FACE_DOWN_ROT, false, true)
				else
					giveObjectToPlayer(card, player, {forward = 0, right = offset, up = 0}, FACE_UP_ROT, false, true)
				end
			end
			if offset == -2 then
				if options.dealRoleCards then
					if greyPlayer(player) then
						giveObjectToPlayer(card, player, {forward = GREY_FORWARD, right = GREY_RIGHT, up = GREY_UP}, FACE_DOWN_ROT, false, true)
					else
						giveObjectToPlayer(card, player, {forward = 0, right = offset, up = 0}, FACE_DOWN_ROT, false, true)
					end
				else
					local tmpGUID = player_decks[i].getVar('displayGuid')
					if not tmpGUID then
						tmpGUID = string.format('%06x', tonumber(card.getGUID(), 16) + 1)
					end
					playerRoleCardGuids[player] = tmpGUID
					destroyObject(card)
				end
			end
		end
	end

	mainNotes = 'For long games the old notes will be\nremoved automatically by the note taker.\nThis is functionality does not work well when\nenabling player names in the notes.\n\n'
	mainNotes = mainNotes .. 'Only the president can draw cards.\n\nTo topdeck a card move the election tracker\nto the \34REVEAL & PASS TOP POLICY\34 circle.\n\n'
	if not options.dealRoleCards then
		mainNotes = mainNotes .. '[FFFF00]No role cards will be dealt.[-]\n\n'
	end
	if not options.dealPartyCards then
		mainNotes = mainNotes .. '[FFFF00]No party membership cards will be dealt.[-]\n\n'
	end
	mainNotes = mainNotes .. 'There are [0000FF][b]' .. #players - #fascists - #hitler .. ' ' .. string.upper(text.liberal) .. 'S[/b][-]\nagainst '
	if #fascists > 0 then
		mainNotes = mainNotes .. '[FF0000][b]' .. #fascists .. ' ' .. string.upper(text.fascist) .. '[/b][-]'
	end
	if #hitler > 1 and #fascists > 0 then
		mainNotes = mainNotes .. ','
	end
	if #hitler > 1 then
		mainNotes = mainNotes .. ' [FF0000][b]' .. #hitler - 1 .. ' FAKE ' .. string.upper(text.hitler)
	end
	if #hitler == 2 then
		mainNotes = mainNotes .. '[/b][-]'
	elseif #hitler > 2 then
		mainNotes = mainNotes .. 'S[/b][-]'
	end
	mainNotes = mainNotes .. ' and [FF0000][b]' .. string.upper(text.hitler) .. '[/b][-].\n'
	mainNotes = mainNotes .. string.upper(text.hitler)
	if #players < 7 then
		mainNotes = mainNotes .. ' [b]knows[/b] who the '
	else
		mainNotes = mainNotes .. ' [b]doesn\'t know[/b] who the '
	end
	mainNotes = mainNotes .. string.upper(text.fascist) .. 'S are.\n\n'
	setNotes(mainNotes)

	-- Pick a random first president
	local randomPlayer = math.random(#players)
	local president = getObjectFromGUID(PRESIDENT_GUID)
	local pos = president.getPosition()
	president.setVar('lastPres', players[randomPlayer])
	president.setPositionSmooth({0, pos['y']+7, 0})
	local chancelor = getObjectFromGUID(CHANCELOR_GUID)
	pos = chancelor.getPosition()
	chancelor.setPositionSmooth({0, pos['y']+14, 0})

	-- Policy card setup
	for i = 1, options.liberalCards do
		spawnLiberalPolicy(getPositionByGUID(DRAW_ZONE_GUID), FACE_DOWN_ROT)
	end
	for i = 1, options.fascistCards do
		spawnFascistPolicy(getPositionByGUID(DRAW_ZONE_GUID), FACE_DOWN_ROT)
	end
	for i = 1, options.greyCards do
		spawnGreyPolicy(getPositionByGUID(DRAW_ZONE_GUID), FACE_DOWN_ROT)
	end

	sleep(0.5)

	-- Tell everyone their role
	printToAll('--------------------------------------', {1,1,1})
	for _, color in ipairs(players) do
		if greyPlayer(color) then
			local playerObj = getPlayerObj(color)
			if playerObj then
				playerObj:print(tellRole(color))
			end
		else
			Player[color]:print(tellRole(color))
		end
	end
	printToAll('--------------------------------------', {1,1,1})

	-- Move and tell first pres
	giveObjectToPlayer(president, players[randomPlayer], {forward = 11, right = 0, up = 0, forceHeight = 3}, NO_ROT)
	giveObjectToPlayer(chancelor, players[randomPlayer], {forward = 11, right = 0, up = 0, forceHeight = 5.5}, NO_ROT)
	local hcol = stringColorToRGBExtra(players[randomPlayer])
	printToAll(players[randomPlayer] .. ' is first president!', hcol)
	printToAll('--------------------------------------', {1,1,1})
	for _, color in ipairs(players) do
		if greyPlayer(color) then
			local playerObj = getPlayerObj(color)
			if playerObj then
				playerObj:print(chatHelp(playerObj.admin))
			end
		else
			Player[color]:print(chatHelp(Player[color].admin))
		end
	end

	deleteCustomBoardCards()

	sleep(1)

	--Shuffle the policy deck
	if not shuffleDrawDeck() then
		broadcastToAll('ERROR: Unable to shuffle draw deck! Restart required.', {1,0,0})
		return true
	end

	-- interactable/unlock other items
	president.setLock(false)
	president.interactable = true
	chancelor.setLock(false)
	chancelor.interactable = true
	tmpObj = getObjectFromGUID(ELECTION_TRACKER_GUID)
	tmpObj.setLock(false)
	if #players == 5 then
		destroyObjectByGUID(PREV_PRESIDENT_GUID)
	else
		tmpObj = getObjectFromGUID(PREV_PRESIDENT_GUID)
		tmpObj.setLock(false)
	end
	tmpObj = getObjectFromGUID(PREV_CHANCELOR_GUID)
	tmpObj.setLock(false)

	-- Lock placed board cards
	testActionUsedPolicyZones(
		function(p) return isBoardCard(p) or isPolicyNotUsedCard(p) end,
		function(p) p.setLock(true) end,
		boardCardWaitId)

	--Set the started variable to true
	started = true
	refreshStatusButtons()
	refreshUI()

	return true
end

function setupPowerAbilities(abilitiesDeck)
	local tmpZoneGuid
	local params = {index = 1}
	local card
	for _, tmpZoneGuid in ipairs(liberal_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if isBoardCardBelowAbility(j) then
					local pos = j.getPosition()
					pos["z"] = pos["z"] - 7.8
					card = abilitiesDeck.takeObject(params)
					card.setPositionSmooth(pos)
					card.setRotationSmooth(FACE_UP_ROT)
				elseif isBoardCardBelowHiddenAbility(j) then
					local pos = j.getPosition()
					pos["z"] = pos["z"] - 7.8
					card = abilitiesDeck.takeObject(params)
					card.setPositionSmooth(pos)
					card.setRotationSmooth(FACE_DOWN_ROT)
				end
			end
		end
	end
	for _, tmpZoneGuid in ipairs(fascist_zone_guids) do
		tmpZone = getObjectFromGUID(tmpZoneGuid)
		if tmpZone then
			inZone = tmpZone.getObjects()
			for _, j in ipairs(inZone) do
				if isBoardCardAboveAbility(j) then
					local pos = j.getPosition()
					pos["z"] = pos["z"] + 7.7
					card = abilitiesDeck.takeObject(params)
					card.setPositionSmooth(pos)
					card.setRotationSmooth(FACE_UP_ROT)
				elseif isBoardCardAboveHiddenAbility(j) then
					local pos = j.getPosition()
					pos["z"] = pos["z"] + 7.7
					card = abilitiesDeck.takeObject(params)
					card.setPositionSmooth(pos)
					card.setRotationSmooth(FACE_DOWN_ROT)
				end
			end
		end
	end
end

function statusButtonCallback(objIn, paramsIn)
	table.insert(playerStatusButtonGuids, 1, objIn.getGUID())
end

function greyPlayerHandCallback(objIn, paramsIn)
	local color = string.gsub(objIn.getDescription(), ' Hand', '')
	greyPlayerHandGuids[color] = objIn.getGUID()
	objIn.AssetBundle.playLoopingEffect(1)
end

function changePlayerStatus(clickedObject, playerColor)
	if Player[playerColor].admin then
		local ownerColor = clickedObject.getName()
		_G.playerStatus[ownerColor] = _G.playerStatus[ownerColor] + 1
		local abilitiesDeck = getDeckFromZoneByGUID(ABILITIESPILE_ZONE_GUID)
		if not abilitiesDeck then
			if _G.playerStatus[ownerColor] == 3 then
				_G.playerStatus[ownerColor] = 5
			end
		end
		--fixme > 7 to allow Imprisoned
		if _G.playerStatus[ownerColor] > 6 then _G.playerStatus[ownerColor] = 1 end
		refreshStatusButtons()
	else
		printToColor('ERROR: You are not the host or a promoted player.', playerColor, {1, 0, 0})
	end
end

function tellRole(player)
	local msg = ''
	if player == 'Black' then
		if #hitler == 0 and #fascists == 0 and #players > 0 then
			msg = msg .. '[0080F8]Everyone is ' .. text.liberalArticle .. ' ' .. text.liberal .. '![-]\n'
		else
			for _, l in pairs(hitler) do
				msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is ' .. text.hitler .. '!' .. '[-]\n'
			end
			for _, l in pairs(fascists) do
				msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is ' .. text.fascistArticle .. ' ' .. text.fascist .. '!' .. '[-]\n'
			end
		end
	else
		local role = roles[player]
		if role == 'fascist' then
			msg = msg .. '[' .. stringColorToHex(player) .. ']You are ' .. text.fascistArticle .. ' [FF0000]' .. text.fascist .. '[-]![-]\n'
			for _, l in pairs(hitler) do
				msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is ' .. text.hitler .. '!' .. '[-]\n'
			end
			for _, l in pairs(fascists) do
				if not (l == player) then
					msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is ' .. text.fascistArticle .. ' ' .. text.fascist .. ', too!' .. '[-]\n'
				end
			end
		elseif role == 'hitler' then
			msg = msg .. '[' .. stringColorToHex(player) .. ']You are [FF0000]' .. text.hitler .. '[-]![-]\n'
			if #players < 7 then
				for _, l in pairs(hitler) do
					if not (l == player) then
						msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is also ' .. text.hitler .. '!' .. '[-]\n'
					end
				end
				for _, l in pairs(fascists) do
					msg = msg .. '[' .. stringColorToHex(l) .. ']' .. l .. ' is ' .. text.fascistArticle .. ' ' .. text.fascist .. '!' .. '[-]\n'
				end
			end
		elseif role == 'liberal' then
			msg = msg .. '[' .. stringColorToHex(player) .. ']You are ' .. text.liberalArticle .. ' [0080F8]' .. text.liberal .. '[-]![-]\n'
		else
			msg = msg .. player .. ' is not Playing!\n'
		end
	end

	return string.gsub(msg, '\n$', '')
end

function shuffleDrawDeck()
	local drawDeck = getDeckFromZoneByGUID(DRAW_ZONE_GUID)
	if drawDeck then
		drawDeck.shuffle()
		return true
	end

	return false
end

function disableSecurity()
	startLuaCoroutine(Global, 'disableSecurityCoroutine')
end

function disableSecurityCoroutine()
	local allObjs = getAllObjects()
	local tmpObj

	Global.setVar('hold', true)
	broadcastToAll('WARNING: Security has been disabled for 30 seconds!', {1,0,0})
	for _, tmpObj in ipairs(allObjs) do
		if isPolicyCard(tmpObj) then
			tmpObj.interactable = true
		elseif tmpObj.tag == 'Deck' then
			tmpObj.interactable = true
		end
	end
	sleep(30)

	--Expansion
	tmpObj = getDeckFromZoneByGUID(ABILITIESPILE_ZONE_GUID)
	if tmpObj then tmpObj.interactable = false end
	tmpObj = getDeckFromZoneByGUID(EFFECTSPILE_ZONE_GUID)
	if tmpObj then	tmpObj.interactable = false end

	Global.setVar('hold', false)

	return true
end

function createInspectButtons(powerHolder)
	function createInspectButtonsCoroutine()
		local membershipCard = getObjectFromGUID(fakeMembership_card_guid)
		if membershipCard then
			activePowerColor = powerHolder
			if greyPlayer(powerHolder) then
				smartBroadcastToColor('Use the UI to inspect a player.', powerHolder, {1, 1, 1})
			else
				broadcastToColor('Click on the party membership card of the person you want to inspect.', powerHolder, {1, 1, 1})
			end
			for i, playerColor in ipairs(players) do
				if playerColor ~= powerHolder and not inTable(inspected, playerColor) and not (_G.playerStatus[playerColor] > 4) then
					local params = {rotation = {0, 0, 180}, sound = false}
					card = membershipCard.clone(params)
					card.setDescription('Fake Party Card')
					card.setLuaScript(
						'playerColor = \'' .. playerColor .. '\'\r\n\r\n' ..
						'function onCollisionEnter(collision_info)\r\n' ..
						'	if Global.call(\'greyPlayer\', {playerColor}) then\r\n' ..
						'		--hard coded\r\n' ..
						'		self.setRotation({0, 180, 180})\r\n' ..
						'	else\r\n' ..
						'		local ph = Player[playerColor].getPlayerHand()\r\n' ..
						'		if ph then\r\n' ..
						'			self.setRotation({0, ph[\'rot_y\']+180, 180})\r\n' ..
						'		end\r\n' ..
						'	end\r\n' ..
						'	self.setLock(true)\r\n' ..
						'end\r\n\r\n' ..
						'function onLoad(saveString)\r\n' ..
						'	local button = {}\r\n' ..
						'	button.click_function = \'' .. playerColor .. 'Inspected\'\r\n' ..
						'	button.label = \'Inspect\\n' .. playerColor .. '\'\r\n' ..
						'	button.function_owner = Global\r\n' ..
						'	button.position = {0, 3, 0}\r\n' ..
						'	button.rotation = {0, 0, 180}\r\n' ..
						'	button.width = 1000\r\n' ..
						'	button.height = 1500\r\n' ..
						'	button.font_size = 150\r\n' ..
						'	self.createButton(button)\r\n' ..
						'end')
					card.setPosition({0, 30 + (i * 0.25), 0})
					card.setLock(false)
					wait(5)
					giveObjectToPlayer(card, playerColor, {forward = 16.5, right = 0, up = 0}, FACE_DOWN_ROT, false, true)
				end
			end
		else
			printToAll('ERROR: Base membership card not found.', {1,0,0})
		end

		return true
	end
	startLuaCoroutine(Global, 'createInspectButtonsCoroutine')
end

function playerInspected(clickedObject, inspectorColor, checkedColor)
	if inspectorColor == activePowerColor and needInspect() then
		local role = roles[checkedColor]
		local playerColor = stringColorToRGBExtra(checkedColor)
		local roleText
		local roleColor
		if role == 'hitler' or role == 'fascist' then
			roleText = text.fascistArticle .. ' ' .. string.lower(text.fascist)
			roleColor = {1, 0, 0}
		else
			roleText = text.liberalArticle .. ' ' .. string.lower(text.liberal)
			roleColor = {0.1, 0.3, 1}
		end
		printToAll(inspectorColor .. ' inspected ' .. checkedColor, playerColor)
		smartBroadcastToColor(checkedColor .. ' is ' .. roleText .. '!', inspectorColor, roleColor)
		table.insert(inspected, 1, checkedColor)
		removeInspect()
		if options.autoNotate and notate.line and notate.action == 'inspects' then
			noteTakerNotes[notate.line].color2 = checkedColor
			refreshNotes(nil)
			notate.line = nil
			notate.action = ''
		end
		activePowerColor = nil
	end
end

function WhiteInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'White')
end

function BrownInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Brown')
end

function RedInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Red')
end

function OrangeInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Orange')
end

function YellowInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Yellow')
end

function GreenInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Green')
end

function TealInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Teal')
end

function BlueInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Blue')
end

function PurpleInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Purple')
end

function PinkInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Pink')
end

function TanInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Tan')
end

function MaroonInspected(clickedObject, inspectorColor)
	playerInspected(clickedObject, inspectorColor, 'Maroon')
end

function removeInspect()
	local allObjs = getAllObjects()
	for _, object in ipairs(allObjs) do
		if object.tag == 'Card' and (object.getDescription() == 'Fake Party Card') then
			destroyObject(object)
		end
	end
end

function needInspect()
	local allObjs = getAllObjects()
	for _, object in ipairs(allObjs) do
		if object.tag == 'Card' and (object.getDescription() == 'Fake Party Card') then
			return true
		end
	end
	return false
end

function giveRoleCards()
	if not options.dealRoleCards then
		for i, player in ipairs(players) do
			local card = getObjectFromGUID(playerRoleCardGuids[player])
			if card then
				local pos = card.getPosition()
				local params = {position = {pos['x'], pos['y'] + 1 + i * 0.1, pos['z']}, sound = false}
				local newCard = card.clone(params)
				newCard.interactable = true
				newCard.setLock(false)
				if greyPlayer(player) then
					forceObjectToPlayer(newCard, player, {forward = GREY_FORWARD, right = GREY_RIGHT, up = GREY_UP}, FACE_DOWN_ROT)
				else
					forceObjectToPlayer(newCard, player, {forward = 0, right = -2, up = 0}, FACE_DOWN_ROT)
				end
			end
		end
		options.dealRoleCards = true
	end
end

function findUnusedColor()
	local checkList = {'Brown', 'Teal', 'Black', 'White', 'Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Purple', 'Pink'}

	for _, playerColor in ipairs(checkList) do
		if not Player[playerColor].seated then
			return playerColor
		end
	end
end

function shufflePlayers()
	local blackSteamId
	if #getSeatedPlayers() == 10 and Player['Black'].seated then
		blackSteamId = Player['Black'].steam_id
		Player['Black']:changeColor('Grey')
		while Player['Black'].seated do
			coroutine.yield()
		end
	end
	swapColor = findUnusedColor()

	local ranColors = {}
	for _, v in pairs(getSeatedPlayers()) do
		if (not Player[v].host) or options.shuffleHost then
			table.insert(ranColors, 1, v)
		end
	end
	shuffleTable(ranColors)

	seatedPlayers = {}
	local j = 1
	for _, v in pairs(getSeatedPlayers()) do
		if (not Player[v].host) or options.shuffleHost then
			local playerInfo = {}
			playerInfo.target = ranColors[j]
			playerInfo.myColor = v
			table.insert(seatedPlayers, 1, playerInfo)
			j = j + 1
		end
	end

	local doneCount = 0
	local tryCount = #seatedPlayers
	while doneCount ~= #seatedPlayers and tryCount > 0 do
		doneCount = 0
		for i, v in pairs(seatedPlayers) do
			if v.target ~= v.myColor then
				if Player[v.target].seated == false then
					local myC = v.myColor
					if Player[myC].seated == true then
						Player[myC]:changeColor(v.target)
						while Player[myC].seated and not Player[v.target].seated do
							coroutine.yield()
						end
						v.myColor = v.target
						doneCount = doneCount + 1
					end
				elseif Player[swapColor].seated == false then
					local myC = v.myColor
					if Player[myC].seated == true then
						Player[myC]:changeColor(swapColor)
						while Player[myC].seated and not Player[swapColor].seated do
							coroutine.yield()
						end
						v.myColor = swapColor
					end
				end
			else
				doneCount = doneCount + 1
			end
		end
		tryCount = tryCount - 1
		coroutine.yield()
	end

	if blackSteamId then
		for _, p in pairs(Player.getSpectators()) do
			if p.steam_id == blackSteamId then
				p:changeColor('Black')
			end
		end
	end
end

function notateColor2ByObject(tableIn)
	if type(tableIn) == 'table' then
		if tableIn[1] then
			local playerColor = closestPlayer(tableIn[1], players, 18)
			if playerColor and notate.line then
				if noteTakerNotes[notate.line] then
					if noteTakerNotes[notate.line].color1 ~= playerColor then
						noteTakerNotes[notate.line].color2 = playerColor
						refreshNotes(nil)
						notate.line = nil
						notate.action = ''
					end
				end
			end
		end
	end
end
